#!/usr/bin/env bash

#------------------------------------------------------------
# Re-compress, Verify, Test, Re-tag, and Clean Up FLAC Files
#                     Version 0.16.2
#                       sirjaren
#------------------------------------------------------------

#-----------------------------------------------------------------
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#-----------------------------------------------------------------
# You can follow development of this script on Github at:
# https://github.com/sirjaren/redoflacs
#
# Please submit requests/changes/patches and/or comments
#-----------------------------------------------------------------

tags=(
########################
#  USER CONFIGURATION  #
########################
# List the tags to be kept in each FLAC file
# The default is listed below.
# Be sure not to delete the parenthesis ")" below
# or put wanted tags below it! Another common tag
# not added by default is ALBUMARTIST.  Uncomment
# ALBUMARTIST below to allow script to keep this
# tag.

TITLE
ARTIST
#ALBUMARTIST
ALBUM
DISCNUMBER
DATE
TRACKNUMBER
TRACKTOTAL
GENRE

# The COMPRESSION tag is a custom tag to allow
# the script to determine which level of compression
# the FLAC file(s) has/have been compressed at.
COMPRESSION

# The RELEASETYPE tag is a custom tag the author
# of this script uses to catalogue what kind of
# release the album is (ie, Full Length, EP,
# Demo, etc.).
RELEASETYPE

# The SOURCE tag is a custom tag the author of
# this script uses to catalogue which source the
# album has derived from (ie, CD, Vinyl,
# Digital, etc.).
SOURCE

# The MASTERING tag is a custom tag the author of
# this script uses to catalogue how the album has
# been mastered (ie, Lossless, or Lossy).
MASTERING

# The REPLAYGAIN tags below, are added by the
# '-g, --replaygain' or '-G, --replaygain-noforce'
# argument.  If you want to keep the replaygain
# tags, make sure you leave these here.
REPLAYGAIN_REFERENCE_LOUDNESS
REPLAYGAIN_TRACK_GAIN
REPLAYGAIN_TRACK_PEAK
REPLAYGAIN_ALBUM_GAIN
REPLAYGAIN_ALBUM_PEAK

) # <- DO NOT DELETE PARENTHESIS!

# Set whether to remove embedded artwork within FLAC
# files.  By default, this script will remove any
# artwork it can find, whether it's in the legacy
# COVERART tag or METADATA_BLOCK_PICTURE.  Legal
# values are:
#    "true"  (Remove Artwork)
#    "false" (Keep Artwork)
REMOVE_ARTWORK="true"

# Set the type of COMPRESSION to compress the
# FLAC files.  Numbers range from 1-8, with 1 being
# the lowest compression and 8 being the highest
# compression.  The default is 8.
COMPRESSION_LEVEL=8

# Set the where you want the error logs to
# be placed. By default, they are placed in
# the user's HOME directory.
ERROR_LOG="${HOME}"

# Set where the created spectrogram files should
# be placed. By default, the spectrogram PNG files
# will be placed in the same directory as the tested
# FLAC files. Each PNG will have the same name as
# the tested FLAC file but with the extension ".png"
#
# The special value, "default" does the default
# action.  Other values are interpreted as a
# directory. An example of a user-defined location:
# SPECTROGRAM_LOCATION="${HOME}/Spectrogram_Images"
#
# See "--help" or "-h" for more information.
SPECTROGRAM_LOCATION="default"

# Set the number of threads/cores to use
# when running this script.  The default
# number of threads/cores used is taken from the number
# of cores found in /proc/cpuinfo.  If /proc/cpuinfo
# does not exist, or /proc is not mounted, 2 cores/threads
# will used.  Uncomment to override the above behavior and
# set a specific number of threads/cores to use. Example:
# CORES="5" <-- 5 threads/cores will be used
#
# The special value, "proc" does the default
# action if below is uncommented.
# CORES="proc"

##########################
#  END OF CONFIGURATION  #
##########################

######################
#  STATIC VARIABLES  #
######################
# Version
VERSION="0.16.2"

# Export REMOVE_ARTWORK to allow subshell access
export REMOVE_ARTWORK

# Export COMPRESSION_LEVEL to allow subshell access
export COMPRESSION_LEVEL

# Export SPECTROGRAM_LOCATION to allow subshell access
export SPECTROGRAM_LOCATION

# Export the tag array using some trickery (BASH doesn't
# support exporting arrays natively).  Also make the tag
# fields uppercase
export EXPORT_TAG="${tags[@]^^}"

# Various file extensions exported
export FLAC_EXTENSION=".[Ff][Ll][Aa][Cc]"
export WAV_EXTENSION=".[Ww][Aa][Vv]"

# Colors on by default
# Export to allow subshell access
export BOLD_BLUE="\033[1;34m"
export BOLD_GREEN="\033[1;32m"
export BOLD_RED="\033[1;31m"
export CYAN="\033[0;36m"
export MAGENTA="\033[0;35m"
export YELLOW="\033[0;33m"
export NORMAL="\033[0m"

# Log files with timestamp
# Export to allow subshell access
export VERIFY_ERRORS="${ERROR_LOG}/FLAC_Verify_Errors_$(date "+%Y%m%d-%H.%M.%S").log"
export TEST_ERRORS="${ERROR_LOG}/FLAC_Test_Errors_$(date "+%Y%m%d-%H.%M.%S").log"
export MD5_ERRORS="${ERROR_LOG}/MD5_Signature_Errors_$(date "+%Y%m%d-%H.%M.%S").log"
export METADATA_ERRORS="${ERROR_LOG}/FLAC_Metadata_Errors_$(date "+%Y%m%d-%H.%M.%S").log"
export REPLAY_TEST_ERRORS="${ERROR_LOG}/ReplayGain_Test_Errors_$(date "+%Y%m%d-%H.%M.%S").log"
export REPLAY_ADD_ERRORS="${ERROR_LOG}/ReplayGain_Add_Errors_$(date "+%Y%m%d-%H.%M.%S").log"
export AUCDTECT_ERRORS="${ERROR_LOG}/auCDtect_Errors_$(date "+%Y%m%d-%H.%M.%S").log"
export PRUNE_ERRORS="${ERROR_LOG}/FLAC_Prune_Errors_$(date "+%Y%m%d-%H.%M.%S").log"

# Set arguments to null
# If enabled they will be changed to true
COMPRESS=""
TEST=""
AUCDTECT=""
MD5CHECK=""
REPLAYGAIN=""
REDO=""
PRUNE=""

###################################
#  INFORMATION PRINTED TO STDOUT  # 
###################################
# Displaying currently running tasks
title_compress_flac () {
	printf "\n\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
	" " "*" " Compressing FLAC files with level ${COMPRESSION_LEVEL} compression and verifying output"
}

title_compress_notest_flac () {
	printf "\n\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
	" " "*" " Compressing FLAC files with level ${COMPRESSION_LEVEL} compression"
}

title_test_replaygain () {
	printf "\n\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
	" " "*" " Verifying FLAC Files can have ReplayGain Tags added"
}

title_add_replaygain () {
	# Change printed title based on whether there is one more directories to process
	if [[ "${TOTAL_DIRECTORIES}" == "1" ]] ; then
		local DIRECTORY_PLURAL="directory"
	else
		local DIRECTORY_PLURAL="directories"
	fi

	printf "\n\n%s${BOLD_GREEN}%s${NORMAL}%s${CYAN}%s${NORMAL}\n" \
	" " "*" " Applying ReplayGain values by album directory :: " "${TOTAL_DIRECTORIES} ${DIRECTORY_PLURAL}"
}

title_analyze_tags () {
	printf "\n\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
	" " "*" " Analyzing FLAC Tags"
}

title_setting_tags () {
	printf "\n\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
	" " "*" " Setting new FLAC Tags"
}

title_testing_flac () {
	printf "\n\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
	" " "*" " Testing the integrity of each FLAC file"
}

title_aucdtect_flac () {
	printf "\n\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
	" " "*" " Validating FLAC is not lossy sourced"
}

title_md5check_flac () {
	printf "\n\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
	" " "*" " Verifying the MD5 Signature in each FLAC file"
}

title_prune_flac () {
	# Change printed title based on whether embedded artwork is to be removed
	if [[ "${REMOVE_ARTWORK}" == "false" ]] ; then
		# Keep artwork
		local METADATA_REMOVED="STREAMINFO, VORBIS_COMMENT and PICTURE"
	else
		# Remove artwork
		local METADATA_REMOVED="STREAMINFO and VORBIS_COMMENT"
	fi

	printf "\n\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
	" " "*" " Removing all METADATA blocks except ${METADATA_REMOVED}"
}

# Error messages
# Don't display threads as script will quit after diplaying
no_flacs () {
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " There are not any FLAC files to process!"
}

# Information relating to currently running tasks
print_compressing_flac () {
	# Obtain percentage of completed files
	find_percentage

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ Compressing FLAC ] (20) minus 3 (leaves a gap and the gives room for the
	# ellipsis (…) and cursor)
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 30))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"
	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 20))s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r${CYAN}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s" \
	"" "[" " " "Compressing FLAC" " " "]" "${PERCENT_DISPLAY}" " " "*" " ${FILENAME}"
}
print_test_replaygain () {
	# Obtain percentage of completed files
	find_percentage

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ Testing ReplayGain ] (22) minus 3 (leaves a gap and the gives room for the
	# ellipsis (…) and cursor)
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 32))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"

	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 22))s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r${CYAN}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s" \
	"" "[" " " "Testing ReplayGain" " " "]" "${PERCENT_DISPLAY}" " " "*" " ${FILENAME}"
}
print_add_replaygain () {
	# Obtain percentage of completed directories
	find_percentage_directories

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ Adding ReplayGain ] (21) minus 3 (leaves a gap and the gives room for the
	# ellipsis (…) and cursor)
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 31))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"

	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 21))s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r${CYAN}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s" \
	"" "[" " " "Adding ReplayGain" " " "]" "${PERCENT_DISPLAY}" " " "*" " ${FILENAME}"
}
print_testing_flac () {
	# Obtain percentage of completed files
	find_percentage

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ Testing FLAC ] (16) minus 3 (leaves a gap and the gives room for the
	# ellipsis (…) and cursor)
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 26))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"
	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi
	
	printf "\r${NORMAL}%$((${COLUMNS} - 16))s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r${CYAN}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s" \
	"" "[" " " "Testing FLAC" " " "]" "${PERCENT_DISPLAY}" " " "*" " ${FILENAME}"
}
print_failed_flac () {
	# Obtain percentage of completed files
	find_percentage

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ FAILED ] (10) minus 2 (leaves a gap and the gives room for the ellipsis (…))
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 19))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"
	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 10))s${BOLD_BLUE}%s${NORMAL}%s${BOLD_RED}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r%s${BOLD_RED}%s${NORMAL}%s\n" \
	"" "[" " " "FAILED" " " "]" "     " "*" " ${FILENAME}"
}
print_checking_md5 () {
	# Obtain percentage of completed files
	find_percentage

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ Checking MD5 ] (16) minus 3 (leaves a gap and the gives room for the
	# ellipsis (…) and cursor)
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 26))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"
	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 16))s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r${CYAN}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s" \
	"" "[" " " "Checking MD5" " " "]" "${PERCENT_DISPLAY}" " " "*" " ${FILENAME}"
}
print_ok_flac () {
	# Obtain percentage of completed files
	find_percentage

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ OK ] (6) minus 2 (leaves a gap and the gives room for the ellipsis (…))
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 15))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"

	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 6))s${BOLD_BLUE}%s${NORMAL}%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r${CYAN}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s" \
	"" "[" " " "OK" " " "]" "${PERCENT_DISPLAY}" " " "*" " ${FILENAME}"
}
print_ok_replaygain () {
	# Obtain percentage of completed directories
	find_percentage_directories

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ OK ] (6) minus 2 (leaves a gap and the gives room for the ellipsis (…))
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 15))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"

	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 6))s${BOLD_BLUE}%s${NORMAL}%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r${CYAN}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s" \
	"" "[" " " "OK" " " "]" "${PERCENT_DISPLAY}" " " "*" " ${FILENAME}"
}
print_aucdtect_flac () {
	# Obtain percentage of completed files
	find_percentage

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ Validating FLAC ] (19) minus 3 (leaves a gap and the gives room for the
	# ellipsis (…) and cursor)
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 29))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"
	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 19))s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r${CYAN}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s" \
	"" "[" " " "Validating FLAC" " " "]" "${PERCENT_DISPLAY}" " " "*" " ${FILENAME}"
}
print_aucdtect_issue () {
	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ ISSUE ] (9) minus 2 (leaves a gap and the gives room for the ellipsis (…))
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 18))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"
	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 9))s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r%s${BOLD_RED}%s${NORMAL}%s\n" \
	"" "[" " " "ISSUE" " " "]" "     " "*" " ${FILENAME}"
}
print_aucdtect_spectrogram () {
	# Obtain percentage of completed files
	find_percentage

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ Creating Spectrogram ] (24) minus 3 (leaves a gap and the gives room for the
	# ellipsis (…) and cursor)
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 34))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"
	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 24))s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r${CYAN}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s" \
	"" "[" " " "Creating Spectrogram" " " "]" "${PERCENT_DISPLAY}" " " "*" " ${FILENAME}"
}
print_aucdtect_skip () {
	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ SKIPPED ] (11) minus 2 (leaves a gap and the gives room for the ellipsis (…))
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 20))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"
	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 11))s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r%s${YELLOW}%s${NORMAL}%s\n" \
	"" "[" " " "SKIPPED" " " "]" "        " "*" " ${FILENAME}"
}
print_done_flac () {
	# Obtain percentage of completed files
	find_percentage

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ DONE ] (8) minus 2 (leaves a gap and the gives room for the ellipsis (…))
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 17))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"
	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 8))s${BOLD_BLUE}%s${NORMAL}%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r${CYAN}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s" \
	"" "[" " " "DONE" " " "]" "${PERCENT_DISPLAY}" " " "*" " ${FILENAME}"
}
print_level_same_compression () {
	# Obtain percentage of completed files
	find_percentage

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ Already At Level 8 ] (22) minus 2 (leaves a gap and the gives room for
	# the ellipsis (…))
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 31))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"
	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 22))s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r${CYAN}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s" \
	"" "[" " " "Already At Level ${COMPRESSION_LEVEL}" " " "]" "${PERCENT_DISPLAY}" " " "*" " ${FILENAME}"
}
print_analyzing_tags () {
	# Obtain percentage of completed files
	find_percentage

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ Analyzing Tags ] (18) minus 3 (leaves a gap and the gives room for the
	# ellipsis (…) and cursor)
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 28))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"
	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 18))s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r${CYAN}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s" \
	"" "[" " " "Analyzing Tags" " " "]" "${PERCENT_DISPLAY}" " " "*" " ${FILENAME}"
}
print_setting_tags () {
	# Obtain percentage of completed files
	find_percentage

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ Setting Tags ] (16) minus 3 (leaves a gap and the gives room for the
	# ellipsis (…) and cursor)
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 26))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"
	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 16))s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r${CYAN}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s" \
	"" "[" " " "Setting Tags" " " "]" "${PERCENT_DISPLAY}" " " "*" " ${FILENAME}"
}
print_prune_flac () {
	# Obtain percentage of completed files
	find_percentage

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ Pruning Metadata ] (20) minus 3 (leaves a gap and the gives room for the
	# ellipsis (…) and cursor)
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 30))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"
	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 20))s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r${CYAN}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s" \
	"" "[" " " "Pruning Metadata" " " "]" "${PERCENT_DISPLAY}" " " "*" " ${FILENAME}"
}

print_interrupt () {
	# Obtain percentage of completed files
	find_percentage

	# Grab the first line of 'stty -a' output
	# Redirecting '/dev/stderr' to 'stty' allows valid arguments
	read -r COLUMNS < <(stty -a < /dev/stderr)

	# Remove superflous information from 'stty -a'
	# Ends up with number of ${COLUMNS}
	COLUMNS="${COLUMNS/#*columns }"
	COLUMNS="${COLUMNS/%;*}"

	# This is the number of $COLUMNS minus the indent (7) minus length of the printed
	# message, [ Interrupted ] (15) minus 3 (leaves a gap and the gives room for the
	# ellipsis (…) and cursor)
	MAX_FILENAME_LENGTH="$((${COLUMNS} - 25))"

	FILENAME="${i##*/}"
	# Replace possible newlines in filename with '?' (like 'ls' output)
	FILENAME="${FILENAME//
/?}"
	FILENAME_LENGTH="${#FILENAME}"

	if [[ "${FILENAME_LENGTH}" -gt "${MAX_FILENAME_LENGTH}" ]] ; then
		FILENAME="${FILENAME::$MAX_FILENAME_LENGTH}…"
	fi

	printf "\r${NORMAL}%$((${COLUMNS} - 15))s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\r${CYAN}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s" \
	"" "[" " " "Interrupted" " " "]" "${PERCENT_DISPLAY}" " " "*" " ${FILENAME}"
}

######################################
#  FUNCTIONS TO DO VARIOUS COMMANDS  #
######################################
# Top banner displaying invocation settings
top_banner () {
	# If Redo Tags is called, create the necessary spacing
	if [[ "${REDO}" == "true" ]] ; then
		printf '\n\n'
	fi

	# Title
	printf "%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s\n" \
	" " "=======" "  Runtime  Information  " "=======" " "

	# Script Version
	printf "${NORMAL}%s${CYAN}%s${NORMAL}\n" \
	"         Version:  " "${VERSION}"

	# Cores to be used
	printf "${NORMAL}%s${CYAN}%s${NORMAL}\n" \
	"   Threads/Cores:  " "${CORES}"

	# Log directory to be used (No need for newlines
	# since a double newline is prepended to each
	# title operation)
	printf "${NORMAL}%s${CYAN}%s${NORMAL}\n\n" \
	"   Log Directory:  " "${ERROR_LOG}"

	# Message indicating the searching of FLAC files
	printf "%s${BOLD_GREEN}%s${NORMAL}%s" \
	" " "*" " Finding FLAC files to process..."
}

# Create a countdown function for the metadata
# to allow user to quit script safely
countdown_metadata () {
	# Countdown abort
	countdown_abort () {
		printf "\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
		" " "*" " Control-C received, exiting. Please wait..."

		# Restore old stty settings, make stty happy
		# by redirecting /dev/stderr
		stty ${OLD_STTY} < /dev/stderr

		exit 1
	}

	# Creates the listing of tags to be kept
	tags_countdown () {
		# Recreate the tags array so it can be parsed easily
		eval "tags=(${EXPORT_TAG})"
		for i in "${tags[@]}" ; do
			printf "%s\n" "     ${i}"
		done
	}

	# Creates the 10 second countdown
	countdown_10 () {
		COUNT=10
		while [[ ${COUNT} -gt 1 ]] ; do
			printf "${BOLD_RED}%s${NORMAL}%s" "$COUNT" " "
			sleep 1
			((COUNT--))
		done
		# Below is the last second of the countdown
		# Put here for UI refinement (No extra spacing after last second)
		printf "${BOLD_RED}%s${NORMAL}" "1"
		sleep 1
	}

	# Trap SIGINT (Control-C) to abort cleanly
	trap countdown_abort SIGINT

	printf "%s${YELLOW}%s${NORMAL}%s\n" \
	" " "*" " CAUTION! These are the tag fields that will be kept"
	printf "%s${YELLOW}%s${NORMAL}%s\n\n" \
	" " "*" " when re-tagging the selected files:"
	tags_countdown
	printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " By default, this script will REMOVE embedded coverart"
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " when re-tagging the files (that have the legacy COVERART"
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " tag).  Change the REMOVE_ARTWORK option under USER"
	printf "%s${BOLD_RED}%s${NORMAL}%s\n\n" \
	" " "*" " CONFIGURATION to \"false\" to keep embedded artwork."
	printf "%s${YELLOW}%s${NORMAL}%s\n" \
	" " "*" " Waiting 10 seconds before starting script..."
	printf "%s${YELLOW}%s${NORMAL}%s\n" \
	" " "*" " Ctrl+C (Control-C) to abort..."
	printf "%s${BOLD_GREEN}%s${NORMAL}%s" \
	" " "*" " Starting in: "
	countdown_10
}

###############################
#  INCREMENT FLACS PROCESSED  #
###############################
increment_count () {
	# Add counter to temporary file (used for number of flacs processed/percentage)
	printf "%s\n" '.' >> "${PROCESSED_TMP_FILE}"
}

#######################
#  CREATE PERCENTAGE  #
#######################
find_percentage () {
	# Obtain current number of processed FLAC files and create a percentage
	mapfile -n0 processed_array < "${PROCESSED_TMP_FILE}"
	PERCENT_DISPLAY="$(( ${#processed_array[@]} * 100 / ${TOTAL_FLACS} ))"

	case "${#PERCENT_DISPLAY}" in
		1)
			PERCENT_DISPLAY="  ${PERCENT_DISPLAY}%"
		;;
		2)
			PERCENT_DISPLAY=" ${PERCENT_DISPLAY}%"
		;;
		3)
			PERCENT_DISPLAY="${PERCENT_DISPLAY}%"
		;;
	esac	
}

######################################
#  CREATE PERCENTAGE OF DIRECTORIES  #
######################################
find_percentage_directories () {
	# Obtain current number of processed directories and create a percentage
	mapfile -n0 processed_array < "${PROCESSED_TMP_FILE}"
	PERCENT_DISPLAY="$(( ${#processed_array[@]} * 100 / ${TOTAL_DIRECTORIES} ))"

	case "${#PERCENT_DISPLAY}" in
		1)
			PERCENT_DISPLAY="  ${PERCENT_DISPLAY}%"
		;;
		2)
			PERCENT_DISPLAY=" ${PERCENT_DISPLAY}%"
		;;
		3)
			PERCENT_DISPLAY="${PERCENT_DISPLAY}%"
		;;
	esac	
}

###############################################
#  FIND TOTAL DIRECTORIES HOUSING FLAC FILES  #
###############################################
total_directories () {
	# Find all the directories in which to process the FLAC files. This will allow
	# multithreading when applying the ReplayGain tags without fear of race
	# conditions
	for i in "${total_flacs_array[@]}" ; do
		if [[ "${PROCESSED_DIRECTORY}" != "${i%/*}" ]] ; then
			flac_directories_array+=( "${i%/*}" )
		fi
		local PROCESSED_DIRECTORY="${i%/*}"
	done

	# Grab the total number of indices of above array
	TOTAL_DIRECTORIES_INDICES="$(( ${#flac_directories_array[@]} - 1 ))"

	# Allow the number of Directories found to be accessible in subshells
	TOTAL_DIRECTORIES="${#flac_directories_array[@]}"
}

####################################
#  CLEAR PROCESSED FLACS TMP FILE  #
####################################
clear_processed_tmp_file () {
	> "${PROCESSED_TMP_FILE}"
}

##########################
#  CLEAR TEMPORARY FIFO  #
##########################
clear_tmp_fifo () {
	# Remove temporary FIFO (if it exists)
	rm -f "${TMP_FIFO}"

	# Create temporary FIFO
	mkfifo "${TMP_FIFO}"

	# Open FIFO for reading and writing on file descriptor '3'
	exec 3<>"${TMP_FIFO}"
}

####################################################
#  CREATE AUCDTECT TEMPORARY FIFO/FILE DESCRIPTOR  #
####################################################
create_aucdtect_fd () {
	# Set up a temporary FIFO location
	TMP_AUCDTECT_FIFO="/tmp/redoflacs_aucdtect_fifo_$$"

	# Create the temporary FIFO
	mkfifo "${TMP_AUCDTECT_FIFO}"

	# Open FIFO for reading and writing on file descriptor '4'
	exec 4<>"${TMP_AUCDTECT_FIFO}"

	# Remove FIFO and leave just the file descriptor available
	rm "${TMP_AUCDTECT_FIFO}"
}

###############
#  KILL JOBS  #
###############
kill_jobs () {
	# Hide error output in case there are no children to kill
	kill $(jobs -rp) 2> /dev/null
}

################
#  REPLAYGAIN  #
################
# Add ReplayGain to files and make sure each album disc uses the same
# ReplayGain values (multi-disc albums have their own ReplayGain) as well
# as make the tracks have their own ReplayGain values individually.
replaygain () {
	#####################
	#  TEST REPLAYGAIN  #
	#####################

	title_test_replaygain

	# Abort using BASH's trap command on SIGINT
	replaygain_abort () {
		print_interrupt

		# Kill running children
		kill_jobs

		printf "\n%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
		" " "*" " Control-C received, generating summary. Please wait..."

		if [[ -f "${REPLAY_TEST_ERRORS}" ]] ; then
			printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " There were issues with some of the FLAC files,"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " please check:"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " \"${REPLAY_TEST_ERRORS}\" for details."
		elif [[ -f "${REPLAY_ADD_ERRORS}" ]] ; then
			printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " There were issues adding ReplayGain values,"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " please check:"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " \"${REPLAY_ADD_ERRORS}\" for details."
		fi

		REPLAYGAIN_COMPLETE="interrupt"
		operation_summary

		exit 1
	}

	# Trap SIGINT (Control-C) to abort cleanly
	trap replaygain_abort SIGINT

	test_replaygain () {
		# Let's make sure to kill running children if this
		# function was aborted via SIGINT.  This function
		# will receive SIGTERM from the kill in previous trap.
		trap 'kill_jobs ; exit 1' SIGTERM

		# Increment number of FLACs processed
		increment_count

		print_test_replaygain

		# Check if file is a FLAC file (hide output) and send to
		# background to allow killing on SIGTERM
		metaflac --show-md5sum "${i}" >/dev/null 2>&1 &

		# Wait on background process and return exit code of
		# said process
		wait "${!}"

		# Exit code 130 is SIGINT so only check for exit code '1'
		if [[ "${?}" -eq "1" ]] ; then
			# File is not a FLAC file, display failed
			print_failed_flac
			printf "%s\n%s\n%s\n" \
				   "FLAC:  ${i}" \
				   "ERROR: Not a FLAC file" \
				   "------------------------------------------------------------------" \
				   >> "${REPLAY_TEST_ERRORS}"
		else
			# File is a FLAC file, display ok
			print_ok_flac
		fi

		# Print newline into FIFO after completion
		printf '\n' >&3
	}

	# Make sure the temporary file is cleared before proceeding
	clear_processed_tmp_file

	# Make sure the temporary FIFO is cleared before proceeding
	clear_tmp_fifo

	# Start as many processes as determined by ${CORES}
	for i in "${total_flacs_array[@]:0:${CORES}}" ; do
		test_replaygain &
	done

	# Add the number of processes started above to count
	ITERATION="${CORES}"

	# If the FLAC files to process are greater than the # of CORES
	# available, continue processing them, else quit
	if [[ "${TOTAL_FLACS}" -gt "${CORES}" ]] ; then

		# After each newline is read from FIFO, start a new process
		while read ; do
			# If current number of FLACs to process is less than total FLACs
			# found, add another FLAC to process
			if [[ "${ITERATION}" -lt "${TOTAL_FLACS_INDICES}" ]] ; then
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				((ITERATION++))
				test_replaygain &

			# If current number of FLACs to process is the last FLAC file, continue
			# processing it and break out of loop (to prevent hanging FIFO)
			elif [[ "${ITERATION}" -eq "${TOTAL_FLACS_INDICES}" ]] ; then
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				test_replaygain &
				break
			fi
		done <&3

	fi

    # Wait for children processes
    wait

	if [[ -f "${REPLAY_TEST_ERRORS}" ]] ; then
		printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " There were issues with some of the FLAC files,"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " please check:"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " \"${REPLAY_TEST_ERRORS}\" for details."

		REPLAYGAIN_COMPLETE="false"
		operation_summary

		exit 1
	fi

	########################
	#  PROCESS REPLAYGAIN  #
	########################

	# Make printing pretty if specified DIRECTORY is '.'
	if [[ "${DIRECTORY}" == "." ]] ; then
		DIRECTORY="${PWD}"
	fi

	# Grab number of directories to process provided as
	# TOTAL_DIRECTORIES variable
	total_directories

	title_add_replaygain

	# Check if "-G, --replaygain-noforce" was called
	if [[ "${REPLAYGAIN_NOFORCE}" == "true" ]] ; then
		# Above option was called, skip FLAC files if all ReplayGain
		# tracks can be accounted for
		process_replaygain () {
			# Let's make sure to kill running children if this
			# function was aborted via SIGINT.  This function
			# will receive SIGTERM from the kill in previous trap
			trap 'kill_jobs ; exit 1' SIGTERM

			# Increment number of directories processed and create percentage
			# of total processed out of the total directories
			increment_count

			# ${i} is the parent directory to the FLAC files
			# ${j} is a FLAC file -> under ${i}
			for j in "${i}"/*${FLAC_EXTENSION} ; do
				# Grab all of the ReplayGain tags
				REPLAYGAIN_REFERENCE_LOUDNESS="$(metaflac --show-tag=REPLAYGAIN_REFERENCE_LOUDNESS "${j}")"
				REPLAYGAIN_REFERENCE_LOUDNESS="${REPLAYGAIN_REFERENCE_LOUDNESS#*=}"

				REPLAYGAIN_TRACK_GAIN="$(metaflac --show-tag=REPLAYGAIN_TRACK_GAIN "${j}")"
				REPLAYGAIN_TRACK_GAIN="${REPLAYGAIN_TRACK_GAIN#*=}"

				REPLAYGAIN_TRACK_PEAK="$(metaflac --show-tag=REPLAYGAIN_TRACK_PEAK "${j}")"
				REPLAYGAIN_TRACK_PEAK="${REPLAYGAIN_TRACK_PEAK#*=}"

				REPLAYGAIN_ALBUM_GAIN="$(metaflac --show-tag=REPLAYGAIN_ALBUM_GAIN "${j}")"
				REPLAYGAIN_ALBUM_GAIN="${REPLAYGAIN_ALBUM_GAIN#*=}"

				REPLAYGAIN_ALBUM_PEAK="$(metaflac --show-tag=REPLAYGAIN_ALBUM_PEAK "${j}")"
				REPLAYGAIN_ALBUM_PEAK="${REPLAYGAIN_ALBUM_PEAK#*=}"

				# Test if any ReplayGain values are empty
				if [[ -z "${REPLAYGAIN_REFERENCE_LOUDNESS}" || \
					  -z "${REPLAYGAIN_TRACK_GAIN}" || \
					  -z "${REPLAYGAIN_TRACK_PEAK}" || \
					  -z "${REPLAYGAIN_ALBUM_GAIN}" || \
					  -z "${REPLAYGAIN_ALBUM_PEAK}" \
				   ]] ; then
					# At _least_ one tag is missing from current file, so
					# apply new ReplayGain values
					print_add_replaygain

					# Add ReplayGain to FLAC files under directory and send
					# to background to allow killing on SIGTERM.  Metaflac
					# automatically removes old ReplayGain values (if any)
					# before proceeding
					metaflac --add-replay-gain "${i}"/*${FLAC_EXTENSION} >/dev/null 2>&1 &

					# Wait on background process and return exit code of
					# said process
					wait "${!}"

					# Exit code 130 is SIGINT so only check for exit code '1'
					if [[ "${?}" -eq 1 ]] ; then
						print_failed_flac
						printf "%s\n%s\n%s\n%s\n" \
							   "Directory: ${i}" \
							   "ERROR:     There was an issue with some FLAC files in this directory." \
							   "           Check that the sample rate is the same for all FLAC files." \
							   "------------------------------------------------------------------" \
							   >> "${REPLAY_ADD_ERRORS}"

						# Placeholder variable tested after this loop
						# if the loop completes with 'break'
						BROKE_OUT_OF_LOOP="true"

						# Break out of loop and on to next directory
						break
					else
						print_ok_replaygain

						# Placeholder variable tested after this loop
						# if the loop completes with 'break'
						BROKE_OUT_OF_LOOP="true"

						# Break out of loop and on to next directory
						break
					fi
				fi
			done

			# If processed directory did not have missing ReplayGain
			# tags, print ok (skipped adding ReplayGain tags)
			if [[ "${BROKE_OUT_OF_LOOP}" != "true" ]] ; then
				print_ok_replaygain
			fi

			printf '\n' >&3
		}
	else
		# Above option was NOT called
		process_replaygain () {
			# Let's make sure to kill running children if this
			# function was aborted via SIGINT.  This function
			# will receive SIGTERM from the kill in previous trap
			trap 'kill_jobs ; exit 1' SIGTERM

			# Increment number of directories processed
			increment_count

			print_add_replaygain

			# Add ReplayGain to FLAC files under directory and send
			# to background to allow killing on SIGTERM
			metaflac --add-replay-gain "${i}"/*${FLAC_EXTENSION} >/dev/null 2>&1 &

			# Wait on background process and return exit code of
			# said process
			wait "${!}"

			# Exit code 130 is SIGINT so only check for exit code '1'
			if [[ "${?}" -eq 1 ]] ; then
				print_failed_flac
				printf "%s\n%s\n%s\n%s\n" \
					   "Directory: ${i}" \
					   "ERROR:     There was an issue with some FLAC files in this directory." \
					   "           Check that the sample rate is the same for all FLAC files." \
					   "------------------------------------------------------------------" \
					   >> "${REPLAY_ADD_ERRORS}"
			else
				print_ok_replaygain
			fi

			# Print newline into FIFO after completion
			printf '\n' >&3
		}
	fi

	# Make sure the temporary file is cleared before proceeding
	clear_processed_tmp_file

	# Make sure the temporary FIFO is cleared before proceeding
	clear_tmp_fifo

	# Start as many processes as determined by ${CORES}
	for i in "${flac_directories_array[@]:0:${CORES}}" ; do
		process_replaygain &
	done

	# Add the number of processes started above to count
	ITERATION="${CORES}"

	# If the directories to process are greater than the # of CORES
	# available, continue processing them, else quit
	if [[ "${TOTAL_DIRECTORIES}" -gt "${CORES}" ]] ; then

		# After each newline is read from FIFO, start a new process
		while read ; do
			# If current number of directories to process is less than total directories
			# found, add another directory to process
			if [[ "${ITERATION}" -lt "${TOTAL_DIRECTORIES_INDICES}" ]] ; then
				# Set ${i} to current directory to process
				i="${flac_directories_array[${ITERATION}]}"
				((ITERATION++))
				process_replaygain &

			# If current directory to process is the last directory, continue
			# processing it and break out of loop (to prevent hanging FIFO)
			elif [[ "${ITERATION}" -eq "${TOTAL_DIRECTORIES_INDICES}" ]] ; then
				# Set ${i} to current directory to process
				i="${flac_directories_array[${ITERATION}]}"
				process_replaygain &
				break
			fi
		done <&3

	fi

	# Wait for children processes
	wait

	if [[ -f "${REPLAY_ADD_ERRORS}" ]] ; then
		printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " There were issues with some of the FLAC files,"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " please check:"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " \"${REPLAY_ADD_ERRORS}\" for details."

		REPLAYGAIN_COMPLETE="false"
		operation_summary

		exit 1
	fi

	# ReplayGain completed successfully
	REPLAYGAIN_COMPLETE="true"
}

#############################
#  COMPRESS & VERIFY FLACS  #
#############################
# Compress FLAC files and verify output
compress_flacs () {
	# If '-C, --compress-notest' was called, print the
	# correct title
	if [[ "${SKIP_TEST}" == "true" ]] ; then
		title_compress_notest_flac
	else
		title_compress_flac
	fi

	# Abort script and remove temporarily encoded FLAC files (if any)
	# and check for any errors thus far
	compress_abort () {
		print_interrupt

		# Kill running children
		kill_jobs

		printf "\n%s${BOLD_GREEN}%s${NORMAL}%s\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
		" " "*" " Control-C received, removing temporary files and" \
		" " "*" " generating summary. Please wait..."

		# Remove temporarily encoded FLAC files
		rm "${DIRECTORY}"/**/*.tmp,fl-ac+en\'c

		if [[ -f "${VERIFY_ERRORS}" ]] ; then
			printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " Errors found in some FLAC files, please check:"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " \"${VERIFY_ERRORS}\" for errors"
		fi

		COMPRESS_COMPLETE="interrupt"
		operation_summary

		exit 1
	}

	# Trap SIGINT (Control-C) to abort cleanly
	trap compress_abort SIGINT

	compress_f () {
		# Let's make sure to kill running children if this
		# function was aborted via SIGINT.  This function
		# will receive SIGTERM from the kill in previous trap
		trap 'kill_jobs ; exit 1' SIGTERM

		# Increment number of FLACs processed
		increment_count

		# Test for COMPRESSION level in FLAC file. Hide error output since
		# we'll be verifying the FLAC file later
		COMPRESSION="$(metaflac --show-tag=COMPRESSION "${i}" 2> /dev/null)"
		COMPRESSION="${COMPRESSION/#*=}"

		if [[ "${COMPRESSION}" != "${COMPRESSION_LEVEL}" ]] ; then
			print_compressing_flac

			# Compress FLAC file with user defined COMPRESSION and send to
			# background to allow killing on SIGTERM
			flac -f -${COMPRESSION_LEVEL} -V --totally-silent "${i}" &

			# Wait on background process and return exit code of
			# said process
			wait "${!}"

			# Exit code 130 is SIGINT so only check for exit code '1'
			if [[ "${?}" -eq 1 ]] ; then
				print_failed_flac
				printf "%s\n%s\n%s\n" \
					   "FLAC:  ${i}" \
					   "ERROR: Not a FLAC file or failed verification." \
					   "------------------------------------------------------------------" \
					   >> "${VERIFY_ERRORS}"
			else
				metaflac --remove-tag=COMPRESSION "${i}"
				metaflac --set-tag=COMPRESSION=${COMPRESSION_LEVEL} "${i}"
				print_ok_flac
			fi

		# If already at COMPRESSION_LEVEL, test the FLAC file instead
		# or skip the file if '-C, --compress-notest' was specified
		else
			print_level_same_compression

			if [[ "${SKIP_TEST}" != "true" ]] ; then
				print_testing_flac

				# Test FLAC file and send to background to allow
				# killing on SIGTERM
				flac -t --totally-silent "${i}" &

				# Wait on background process and return exit code of
				# said process
				wait "${!}"

				# Exit code 130 is SIGINT so only check for exit code '1'
				if [[ "${?}" -eq 1 ]] ; then
					print_failed_flac
					printf "%s\n%s\n%s\n" \
						   "FLAC:  ${i}" \
						   "ERROR: Not a FLAC file or failed testing." \
						   "------------------------------------------------------------------" \
						   >> "${VERIFY_ERRORS}"
				else
					print_ok_flac
				fi
			fi

		fi

		# Print newline into FIFO after completion
		printf '\n' >&3
	}

	# Make sure the temporary file is cleared before proceeding
	clear_processed_tmp_file

	# Make sure the temporary FIFO is cleared before proceeding
	clear_tmp_fifo

	# Start as many processes as determined by ${CORES}
	for i in "${total_flacs_array[@]:0:${CORES}}" ; do
		compress_f &
	done

	# Add the number of processes started above to count
	ITERATION="${CORES}"

	# If the FLAC files to process are greater than the # of CORES
	# available, continue processing them, else quit
	if [[ "${TOTAL_FLACS}" -gt "${CORES}" ]] ; then

		# After each newline is read from FIFO, start a new process
		while read ; do
			# If current number of FLACs to process is less than total FLACs
			# found, add another FLAC to process
			if [[ "${ITERATION}" -lt "${TOTAL_FLACS_INDICES}" ]] ; then
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				((ITERATION++))
				compress_f &
			else
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				compress_f &
				break
			fi
		done <&3

	fi

	# Wait for children processes
	wait

	if [[ -f "${VERIFY_ERRORS}" ]] ; then
		printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " Errors found in some FLAC files, please check:"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " \"${VERIFY_ERRORS}\" for errors"

		COMPRESS_COMPLETE="false"
		operation_summary

		exit 1
	fi

	# Compress FLACS completed successfully
	COMPRESS_COMPLETE="true"
}

################
#  TEST FLACS  #
################
# Test FLAC files
test_flacs () {
	title_testing_flac

	# Abort script and check for any errors thus far
	test_abort () {
		print_interrupt

		# Kill running children
		kill_jobs

		printf "\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
		" " "*" " Control-C received, generating summary. Please wait..."

		if [[ -f "${TEST_ERRORS}" ]] ; then
			printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " Errors found in some FLAC files, please check:"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " \"${TEST_ERRORS}\" for errors"
		fi

		TEST_COMPLETE="interrupt"
		operation_summary

		exit 1
	}

	# Trap SIGINT (Control-C) to abort cleanly
	trap test_abort SIGINT

	test_f () {
		# Let's make sure to kill running children if this
		# function was aborted via SIGINT.  This function
		# will receive SIGTERM from the kill in previous trap
		trap 'kill_jobs ; exit 1' SIGTERM

		# Increment number of FLACs processed
		increment_count

		print_testing_flac

		# Test FLAC file and send to background to
		# allow killing on SIGTERM
		flac -t --totally-silent "${i}" &

		# Wait on background process and return exit code of
		# said process
		wait "${!}"

		# Exit code 130 is SIGINT so only check for exit code '1'
		if [[ "${?}" -eq 1 ]] ; then
			print_failed_flac
			printf "%s\n%s\n%s\n" \
				   "FLAC:  ${i}" \
				   "ERROR: Not a FLAC file or failed testing." \
				   "------------------------------------------------------------------" \
				   >> "${TEST_ERRORS}"
		else
			print_ok_flac
		fi

		# Print newline into FIFO after completion
		printf '\n' >&3
	}

	# Make sure the temporary file is cleared before proceeding
	clear_processed_tmp_file

	# Make sure the temporary FIFO is cleared before proceeding
	clear_tmp_fifo

	# Start as many processes as determined by ${CORES}
	for i in "${total_flacs_array[@]:0:${CORES}}" ; do
		test_f &
	done

	# Add the number of processes started above to count
	ITERATION="${CORES}"

	# If the FLAC files to process are greater than the # of CORES
	# available, continue processing them, else quit
	if [[ "${TOTAL_FLACS}" -gt "${CORES}" ]] ; then

		# After each newline is read from FIFO, start a new process
		while read ; do

			# If current number of FLACs to process is less than total FLACs
			# found, add another FLAC to process
			if [[ "${ITERATION}" -lt "${TOTAL_FLACS_INDICES}" ]] ; then
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				((ITERATION++))
				test_f &

			# If current number of FLACs to process is the last FLAC file, continue
			# processing it and break out of loop (to prevent hanging FIFO)
			elif [[ "${ITERATION}" -eq "${TOTAL_FLACS_INDICES}" ]] ; then
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				test_f &
				break
			fi
		done <&3

	fi

	# Wait for children processes
	wait

	if [[ -f "${TEST_ERRORS}" ]] ; then
		printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " Errors found in some FLAC files, please check:"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " \"${TEST_ERRORS}\" for errors"

		TEST_COMPLETE="false"
		operation_summary

		exit 1
	fi

	# Test FLACS completed successfully
	TEST_COMPLETE="true"
}

#######################################
#  CHECK FLAC VALIDITY WITH AUCDTECT  #
#######################################
# Use auCDtect to check FLAC validity
aucdtect () {
	# Check if SPECTROGRAM_LOCATION is user-defined
	if [[ "${SPECTROGRAM_LOCATION}" != "default" ]] ; then
		# Put spectrograms in user-defined location
		# Test to make sure directory exists
		if [[ ! -d "${SPECTROGRAM_LOCATION}" ]] ; then
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " \"${SPECTROGRAM_LOCATION}\" doesn't exist!"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " Please choose a valid directory under USER CONFIGURATION!"

			exit 1
		fi
	fi

	title_aucdtect_flac

	# Abort script and check for any errors thus far
	aucdtect_abort () {
		print_interrupt

		# Kill running children
		kill_jobs

		printf "\n%s${BOLD_GREEN}%s${NORMAL}%s\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
		" " "*" " Control-C received, removing temporary files and" \
		" " "*" " generating summary. Please wait..."

		# Remove temporarily created WAV files (if any)
		rm -f "${DIRECTORY}"/**/*_redoflacs_"$$".wav

		if [[ -f "${AUCDTECT_ERRORS}" ]] ; then
			printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " Some FLAC files may be lossy sourced, please check:"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " \"${AUCDTECT_ERRORS}\" for details"
		fi

		AUCDTECT_COMPLETE="interrupt"
		operation_summary

		exit 1
	}

	# Trap SIGINT (Control-C) to abort cleanly
	trap aucdtect_abort SIGINT

	aucdtect_f () {
		# Let's make sure to kill running children if this
		# function was aborted via SIGINT.  This function
		# will receive SIGTERM from the kill in previous trap
		trap 'kill_jobs ; exit 1' SIGTERM

		# Increment number of FLACs processed
		increment_count

		print_aucdtect_flac

		# Get the bit depth of a FLAC file, also used to check
		# if FLAC file is real.  Hide stderr output
		BITS="$(metaflac --show-bps "${i}" 2> /dev/null)"

		# Exit code 130 is SIGINT so only check for exit code '1'
		if [[ "${?}" -eq "1" ]] ; then
			# File is not a FLAC file, display failed
			print_failed_flac
			printf "%s\n%s\n%s\n" \
				   "FLAC:  ${i}" \
				   "ERROR: Not a FLAC file" \
				   "------------------------------------------------------------------" \
				   >> "${AUCDTECT_ERRORS}"

		# Skip the FLAC file if it has a bit depth greater
		# than 16 since auCDtect doesn't support audio
		# files with a higher resolution than a CD.
		elif [[ "${BITS}" -gt "16" ]] ; then
			print_aucdtect_skip
			printf "%s\n%s\n%s\n" \
				   "FLAC:  ${i}" \
				   "ERROR: The above file has a bit depth greater than 16 and was skipped" \
				   "------------------------------------------------------------------" \
				   >> "${AUCDTECT_ERRORS}"

		# FLAC checks out, continue processing
		else
			# The WAV file to be created from current FLAC file
			DECODED_WAV="${i%${FLAC_EXTENSION}}_redoflacs_"$$".wav"

			# Decompress FLAC to WAV so auCDtect can read the audio file
			# and send to background to allow killing on SIGTERM
			flac --totally-silent -d "${i}" -o "${DECODED_WAV}" &

			# Wait on background process and return exit code of
			# said process
			wait "${!}"

			# Exit code 130 is SIGINT so only check for exit code '1'
			# If FLAC file failed decoding to WAV, log error, otherwise
			# continue processing
			if [[ "${?}" -eq "1" ]] ; then
				print_failed_flac
				printf "%s\n%s\n%s\n" \
					   "FLAC:  ${i}" \
					   "ERROR: Failed decoding FLAC file to WAV (most likely corrupt)" \
					   "------------------------------------------------------------------" \
					   >> "${AUCDTECT_ERRORS}"
			else
				# 'export MALLOC_CHECK_' allows the dynamic linked version of auCDtect
				# to run without throwing errors
				export MALLOC_CHECK_="0"

				# The actual auCDtect command with highest accuracy setting
				# 2> hides the displayed progress to /dev/null disabling the progress percentage
				# STDOUT is sent to file descriptor '4' and the prcess sent to the background to allow
				# killing via SIGTERM
				"${AUCDTECT_COMMAND}" -m0 "${DECODED_WAV}" 2>/dev/null >&4 &

				# Wait on background process and return exit code of
				# said process
				wait "${!}"

				# Exit code 130 is SIGINT so only check for exit code '1'
				# If auCDtect failed to 
				if [[ "${?}" -eq "1" ]] ; then
					print_failed_flac
					printf "%s\n%s\n%s\n%s\n%s\n%s\n" \
						   "FLAC:  ${i}" \
						   "WAV:   ${DECODED_WAV}" \
						   "ERROR: auCDtect failed to analyze the decoded WAV file." \
						   "       Something may have happened when decoding the above FLAC" \
						   "       file.  Please verify the FLAC file is not corrupt." \
						   "------------------------------------------------------------------" \
						   >> "${AUCDTECT_ERRORS}"
				else
					# Grab the conclusion of auCDtect's command
					# Below options prevents hanging FIFO by only reading
					# what is necessary:
					#    -s7:  Discard first seven lines from auCDtect's output
					#    -n2:  Only grab 2 lines from auCDtect's output
					#     -t:  Remove trailing newlines from auCDtect's output
					#    -u4:  Obtain auCDtect's output from file descriptor '4'
					#  array:  Store captured output into 'aucdtect_check_array'
					mapfile -s7 -n2 -t -u4 aucdtect_check_array

					# There is an issue with the processed FLAC file
					if [[ "${aucdtect_check_array[0]}" != "This track looks like CDDA with probability 100%" ]] ; then
						# If user specified '-A, --aucdtect-spectrogram', then
						# create a spectrogram with SoX and change logging accordingly
						if [[ "${CREATE_SPECTROGRAM}" == "true" ]] ; then
							# Check whether to place spectrogram images in user-defined location
							if [[ "${SPECTROGRAM_LOCATION}" == "default" ]] ; then
								# Place images in same directory as the FLAC files
								# Make sure we don't clobber any picture files
								if [[ -f "${i%${FLAC_EXTENSION}}.png" ]] ; then
									# File exists so prepend "spectrogram" before ".png"
									SPECTROGRAM_PICTURE="${i%${FLAC_EXTENSION}}.spectrogram.png"
								else
									# File doesn't exist, so create the spectrogram with the basename of "$i"
									# with ".png" as the extension
									SPECTROGRAM_PICTURE="${i%${FLAC_EXTENSION}}.png"
								fi
							else
								# Place images in user-defined location
								FLAC_FILE="${i##*/}"
								SPECTROGRAM_PICTURE="${SPECTROGRAM_LOCATION}/${FLAC_FILE%${FLAC_EXTENSION}}.png"
							fi

							# Let's create the spectrogram for the failed FLAC file
							# and output progress
							print_aucdtect_spectrogram

							# SoX command to create the spectrogram and place it in SPECTROGRAM_PICTURE,
							# sent to the background to allow killing via SIGTERM
							"${SOX_COMMAND}" "${i}" -n spectrogram -c '' -t "${i}" -p1 -z90 -Z0 -q249 -wHann -x1800 -y513 -o "${SPECTROGRAM_PICTURE}" &

							# Use the below version of the command to create hi-res spectrograms
							#"${SOX_COMMAND}" "${i}" -n spectrogram -c '' -t "${i}" -p1 -z90 -Z0 -q249 -wHann -x5000 -y1025 -o "${SPECTROGRAM_PICTURE}"

							# Wait on background process and return exit code of
							# said process
							wait "${!}"

							# Print ISSUE and log error, and show where to find
							# the created spectrogram of the processed FLAC file
							print_aucdtect_issue
							printf "%s\n%s\n%s\n%s\n" \
								   "FLAC:        ${i}" \
								   "ERROR:       ${aucdtect_check_array[0]}" \
								   "SPECTROGRAM: ${SPECTROGRAM_PICTURE}" \
								   "------------------------------------------------------------------" \
								   >> "${AUCDTECT_ERRORS}"
						else
							# Print ISSUE and log error
							print_aucdtect_issue
							printf "%s\n%s\n%s\n" \
								   "FLAC:  ${i}" \
								   "ERROR: ${aucdtect_check_array[0]}" \
								   "------------------------------------------------------------------" \
								   >> "${AUCDTECT_ERRORS}"
						fi
					# The processed FLAC file is OK
					else
						print_ok_flac
					fi

					# Remove temporary WAV file
					rm "${DECODED_WAV}"
				fi
			fi
		fi

		# Print newline into FIFO after completion
		printf '\n' >&3
	}

	# Make sure the temporary file is cleared before proceeding
	clear_processed_tmp_file

	# Make sure the temporary FIFO is cleared before proceeding
	clear_tmp_fifo

	# Open up a temporary file descriptor to send auCDtect's
	# STDOUT to
	create_aucdtect_fd

	# Start as many processes as determined by ${CORES}
	for i in "${total_flacs_array[@]:0:${CORES}}" ; do
		aucdtect_f &
	done

	# Add the number of processes started above to count
	ITERATION="${CORES}"

	# If the FLAC files to process are greater than the # of CORES
	# available, continue processing them, else quit
	if [[ "${TOTAL_FLACS}" -gt "${CORES}" ]] ; then

		# After each newline is read from FIFO, start a new process
		while read ; do
			# If current number of FLACs to process is less than total FLACs
			# found, add another FLAC to process
			if [[ "${ITERATION}" -lt "${TOTAL_FLACS_INDICES}" ]] ; then
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				((ITERATION++))
				aucdtect_f &

			# If current number of FLACs to process is the last FLAC file, continue
			# processing it and break out of loop (to prevent hanging FIFO)
			elif [[ "${ITERATION}" -eq "${TOTAL_FLACS_INDICES}" ]] ; then
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				aucdtect_f &
				break
			fi
		done <&3

	fi

	# Wait for children processes
	wait

	if [[ -f "${AUCDTECT_ERRORS}" ]] ; then
		printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " Some FLAC files may be lossy sourced, please check:"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " \"${AUCDTECT_ERRORS}\" for details"

		AUCDTECT_COMPLETE="false"
		operation_summary

		exit 1
	fi

	# auCDtect completed successfully
	AUCDTECT_COMPLETE="true"
}

#########################
#  CHECK MD5 SIGNATURE  #
#########################
# Check for unset MD5 Signatures in FLAC files
md5_check () {
	title_md5check_flac

	# Abort script and check for any errors thus far
	md5_check_abort () {
		print_interrupt

		# Kill running children
		kill_jobs

		printf "\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
		" " "*" " Control-C received, generating summary. Please wait..."

		if [[ -f "${MD5_ERRORS}" ]] ; then
			printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " The MD5 Signature is unset for some FLAC files or there were"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " issues with some of the FLAC files, please check:"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " \"${MD5_ERRORS}\" for details"
		fi

		MD5CHECK_COMPLETE="interrupt"
		operation_summary

		exit 1
	}

	# Trap SIGINT (Control-C) to abort cleanly
	trap md5_check_abort SIGINT

	md5_c () {
		# Let's make sure to kill running children if this
		# function was aborted via SIGINT.  This function
		# will receive SIGTERM from the kill in previous trap
		trap 'kill_jobs ; exit 1' SIGTERM

		# Increment number of FLACs processed
		increment_count

		print_checking_md5

		# Get the MD5 checksum (hide stderr output).  Also
		# used to check if FLAC file is real
		MD5_SUM="$(metaflac --show-md5sum "${i}" 2> /dev/null)"

		# Exit code 130 is SIGINT so only check for exit code '1'
		if [[ "${?}" -eq "1" ]] ; then
			# File is not a FLAC file, display failed
			print_failed_flac
			printf "%s\n%s\n%s\n" \
				   "FLAC:  ${i}" \
				   "ERROR: Not a FLAC file" \
				   "------------------------------------------------------------------" \
				   >> "${MD5_ERRORS}"

		# FLAC file is real, check for unset MD5 checksum
		elif [[ "${MD5_SUM}" == "00000000000000000000000000000000" ]] ; then
			print_failed_flac
			printf "%s\n%s\n%s\n" \
				   "FLAC:  ${i}" \
				   "ERROR: MD5 Signature unset: (${MD5_SUM})" \
				   "------------------------------------------------------------------" \
				   >> "${MD5_ERRORS}"
		else
				print_ok_flac
		fi

		# Print newline into FIFO after completion
		printf '\n' >&3
	}

	# Make sure the temporary file is cleared before proceeding
	clear_processed_tmp_file

	# Make sure the temporary FIFO is cleared before proceeding
	clear_tmp_fifo

	# Start as many processes as determined by ${CORES}
	for i in "${total_flacs_array[@]:0:${CORES}}" ; do
		md5_c &
	done

	# Add the number of processes started above to count
	ITERATION="${CORES}"

	# If the FLAC files to process are greater than the # of CORES
	# available, continue processing them, else quit
	if [[ "${TOTAL_FLACS}" -gt "${CORES}" ]] ; then

		# After each newline is read from FIFO, start a new process
		while read ; do

			# If current number of FLACs to process is less than total FLACs
			# found, add another FLAC to process
			if [[ "${ITERATION}" -lt "${TOTAL_FLACS_INDICES}" ]] ; then
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				((ITERATION++))
				md5_c &

			# If current number of FLACs to process is the last FLAC file, continue
			# processing it and break out of loop (to prevent hanging FIFO)
			elif [[ "${ITERATION}" -eq "${TOTAL_FLACS_INDICES}" ]] ; then
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				md5_c &
				break
			fi
		done <&3

	fi

	# Wait for children processes
	wait

	if [[ -f "${MD5_ERRORS}" ]] ; then
		printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " The MD5 Signature is unset for some FLAC files or there were"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " issues with some of the FLAC files, please check:"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " \"${MD5_ERRORS}\" for details"

		MD5CHECK_COMPLETE="false"
		operation_summary

		exit 1
	fi  

	# MD5 Check completed successfully
	MD5CHECK_COMPLETE="true"
}

###############
#  REDO TAGS  #
###############
# If COVERART tag is kept and REMOVE_ARTWORK is set to 'true'
# display conflict and exit
coverart_remove_conflict () {
	# Check if COVERART exists in the tag array.  Notify user
	# of its deprecation and advise against using it, preferring
	# METADATA_BLOCK_PICTURE
	for j in "${tags[@]}" ; do
		if [[ "${j}" == "COVERART" ]] ; then
			# If REMOVE_ARTWORK is "true" (remove the artwork), then
			# exit and warn the user you can't specify whether you want to
			# remove artwork, yet keep the COVERART tag in USER CONFIGURATION
			if [[ "${REMOVE_ARTWORK}" == "true" ]] ; then

				# Display COVERART tag warning
				coverart_warning

				printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
				" " "*" " It appears you have REMOVE_ARTWORK set to \"true\" under"
				printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
				" " "*" " USER CONFIGURATION, yet COVERART is specified as one"
				printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
				" " "*" " (or more) of the FLAC tags to be kept. Please choose either"
				printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
				" " "*" " keep album artwork (ie REMOVE_ARTWORK=\"false\") or remove"
				printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
				" " "*" " the COVERART tag under the USER CONFIGURATION portion of this"
				printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
				" " "*" " script."

				# Remove temporary file
				rm -f "${PROCESSED_TMP_FILE}"

				exit 1
			# COVERART was found, but artwork is to be removed,
			# so warn user
			else
				# Create COVERART_WARNING variable, so script can append
				# the coverart_warning function after completion as well as
				# determine the correct tag array to use (whether we should
				# add COVERART or not)
				COVERART_WARNING="true"

				# Display tag field warning
				countdown_metadata
			fi
		fi
	done

	# COVERART wasn't found and REMOVE_ARTWORK is set to 'true'
	if [[ "${COVERART_WARNING}" != "true" ]] ; then
		countdown_metadata
	fi
}

# Display why COVERART tag should not be used
coverart_warning () {
	printf "\n%s${YELLOW}%s${NORMAL}%s\n" \
	" " "*" " The COVERART tag is deprecated and should not be"
	printf "%s${YELLOW}%s${NORMAL}%s\n" \
	" " "*" " used. Instead, consider migrating over to the new format:"
	printf "%s${YELLOW}%s${NORMAL}%s\n" \
	" " "*" " METADATA_BLOCK_PICTURE, using modern tag editors. Read:"
	printf "%s${YELLOW}%s${NORMAL}%s\n" \
	" " "*" " http://wiki.xiph.org/VorbisComment#Unofficial_COVERART_field_.28deprecated.29"
	printf "%s${YELLOW}%s${NORMAL}%s\n" \
	" " "*" " for more details."
}

# Check for missing tags and retag FLAC files if all files
# are not missing tags
redo_tags () {
	# Abort script and check for any errors thus far
	redo_tags_abort () {
		print_interrupt

		# Kill running children
		kill_jobs

		printf "\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
		" " "*" " Control-C received, generating summary. Please wait..."

		# Test for DEPRECATED tag, COVERART in METADATA_ERROR log.  If it
		# exists, set COVERART_WARNING variable to make script output
		# warning upon completion
		if [[ -f "${METADATA_ERRORS}" ]] ; then
			while read i ; do
				# Indentation is culled from reading in "${i}"
				# To change this, set IFS to '\n'
				if [[ "${i}" == "the new format: METADATA_BLOCK_PICTURE." ]] ; then
					COVERART_WARNING="true"
					break
				fi
			done < "${METADATA_ERRORS}"
		fi

		if [[ -f "${METADATA_ERRORS}"  && "${COVERART_WARNING}" == "true" ]] ; then
			# Display COVERART warning function and metadata issues
			printf ''
			coverart_warning
			printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " Some FLAC files have missing tags or there were"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " issues with some of the FLAC files, please check:"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " \"${METADATA_ERRORS}\" for details."
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " Not Re-Tagging files."

			REDO_COMPLETE="interrupt"
			operation_summary

			exit 1

		elif [[ -f "${METADATA_ERRORS}" ]] ; then
			# Just display metadata issues
			printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " Some FLAC files have missing tags or there were"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " issues with some of the FLAC files, please check:"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " \"${METADATA_ERRORS}\" for details."
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " Not Re-Tagging files."

			REDO_COMPLETE="interrupt"
			operation_summary

			exit 1
		fi

		REDO_COMPLETE="interrupt"
		operation_summary

		exit 1
	}

	# Trap SIGINT (Control-C) to abort cleanly
	trap redo_tags_abort SIGINT

	################
	# ANALYZE TAGS #
	################

	analyze_tags () {
		# Check if file is a FLAC file (variable hides output)
		CHECK_FLAC="$(metaflac --show-md5sum "${i}" 2>&1)"

		# If above command return anything other than '0', log output
		if [[ "${?}" -ne "0" ]] ; then
			printf "%s\n%s\n%s\n" \
				  "FLAC:  ${i}" \
				  "ERROR: The above file does not appear to be a FLAC file" \
				  "------------------------------------------------------------------" \
				  >> "${METADATA_ERRORS}"
			# File is not a FLAC file, display failed
			print_failed_flac
		else
			# Recreate the tags array so it can be used by the child process
			eval "tags=(${EXPORT_TAG})"

			# Iterate through each tag field and check if tag is missing
			for j in "${tags[@]}" ; do
				# Check if ALBUMARTIST is in tag array and apply operations on
				# the tag field if it exists
				if [[ "${j}" == "ALBUMARTIST" ]] ; then
					# ALBUMARTIST exists in tag array so allow script to check the
					# various naming conventions within the FLAC files (ie,
					# 'ALBUM ARTIST' or 'ALBUM_ARTIST')

					# "ALBUMARTIST" or "ALBUM ARTIST" or "ALBUM_ARTIST", case-insensitive
					if [[ -n "$(metaflac --show-tag=ALBUMARTIST "${i}")" ]] ; then
						local TEMP_TAG="$(metaflac --show-tag=ALBUMARTIST "${i}")"
					elif [[ -n "$(metaflac --show-tag="ALBUM ARTIST" "${i}")" ]] ; then
						local TEMP_TAG="$(metaflac --show-tag="ALBUM ARTIST" "${i}")"
					elif [[ -n "$(metaflac --show-tag="ALBUM_ARTIST" "${i}")" ]] ; then
						local TEMP_TAG="$(metaflac --show-tag="ALBUM_ARTIST" "${i}")"
					fi
				else
					# Grab current tag "${j}" from FLAC file
					local TEMP_TAG="$(metaflac --show-tag="${j}" "${i}")"
				fi

				# Tag field (ie 10 Years, 2001, etc)
				local TAG_VALUE="${TEMP_TAG/#*=}"

				# If tags are not found store missing information into an array
				# to be logged
				if [[ -z "${TAG_VALUE}" && "${FILE_PRINTED}" != "true" ]] ; then
					# First instance of missing tag for current file
					missingTags+=( "$(printf "%s" "FLAC:  ${i}")"
								   "$(printf "%s" "ERROR: ${j} tag not found")" )
					FILE_PRINTED="true"
				elif [[ -z "${TAG_VALUE}" && "${FILE_PRINTED}" == "true" ]] ; then
					# If more than one missing tag in current file,
					# don't print out filename
					missingTags+=( "$(printf "%s" "       ${j} tag not found")" )
				fi
			done
				# If missingTags array is not empty, there are missing
				# tags in the current file so log output
				if [[ -n "${missingTags[@]}" ]] ; then
					# Add separator to log for each file
					missingTags+=( "------------------------------------------------------------------" )
					# Print array into log file
					printf "%s\n" "${missingTags[@]}" >> "${METADATA_ERRORS}"
				fi

		# Done analyzing FLAC file tags
		print_done_flac
		fi
	}

	analyze_tags_dont_log_coverart () {
		# Check if file is a FLAC file (variable hides output)
		CHECK_FLAC="$(metaflac --show-md5sum "${i}" 2>&1)"

		# If above command return anything other than '0', log output
		if [[ "${?}" -ne "0" ]] ; then
			printf "$%s\n%s\n%s\n" \
				   "FLAC:  ${i}" \
				   "ERROR: The above file does not appear to be a FLAC file" \
				   "------------------------------------------------------------------" \
				   >> "${METADATA_ERRORS}"
			# File is not a FLAC file, display failed
			print_failed_flac
		else
			# Recreate the tags array so it can be used by the child process
			eval "tags=(${EXPORT_TAG})"

			# Album artwork is to be kept so preserve COVERART
			tags+=( COVERART )

			# Iterate through each tag field and check if tag is missing (except
			# for the COVERART tag)
			for j in "${tags[@]}" ; do
				# Check if ALBUMARTIST is in tag array and apply operations on
				# the tag field if it exists
				if [[ "${j}" == "ALBUMARTIST" ]] ; then
					# ALBUMARTIST exists in tag array so allow script to check the
					# various naming conventions within the FLAC files (ie,
					# 'ALBUM ARTIST' or 'ALBUM_ARTIST')

					# "ALBUMARTIST" or "ALBUM ARTIST" or "ALBUM_ARTIST", case-insensitive
					if [[ -n "$(metaflac --show-tag=ALBUMARTIST "${i}")" ]] ; then
						local TEMP_TAG="$(metaflac --show-tag=ALBUMARTIST "${i}")"
					elif [[ -n "$(metaflac --show-tag="ALBUM ARTIST" "${i}")" ]] ; then
						local TEMP_TAG="$(metaflac --show-tag="ALBUM ARTIST" "${i}")"
					elif [[ -n "$(metaflac --show-tag="ALBUM_ARTIST" "${i}")" ]] ; then
						local TEMP_TAG="$(metaflac --show-tag="ALBUM_ARTIST" "${i}")"
					fi
				else
					# Grab current tag "${j}" from FLAC file
					local TEMP_TAG="$(metaflac --show-tag="${j}" "${i}")"
				fi

				# Tag field (ie 10 Years, 2001, etc)
				local TAG_VALUE="${TEMP_TAG/#*=}"

				# If COVERART tag is not null, then log file that has
				# the COVERART tag embedded within it about deprecation
				if [[ "${j}" == "COVERART" && -n "${TAG_VALUE}" ]] ; then
					printf "%s\n%s\n%s\n%s\n" \
						   "FLAC:  ${i}" \
						   "ERROR: \"${j}\" tag is DEPRECATED in above file. Consider migrating to" \
						   "       the new format: METADATA_BLOCK_PICTURE." \
						   "------------------------------------------------------------------" \
						   >> "${METADATA_ERRORS}"
				fi

				# If tags are not found store missing information into an array
				# to be logged. Skip output of COVERART tag as this is a temporary
				# addition to the tag array (for processing legacy artwork)
				if [[ -z "${TAG_VALUE}" && "${FILE_PRINTED}" != "true" && "${j}" != "COVERART" ]] ; then
					# First instance of missing tag for current file
					missingTags+=( "$(printf "%s" "FLAC:  ${i}")"
								   "$(printf "%s" "ERROR: ${j} tag not found")" )
					FILE_PRINTED="true"
				elif [[ -z "${TAG_VALUE}" && "${FILE_PRINTED}" == "true" && "${j}" != "COVERART" ]] ; then
					# If more than one missing tag in current file, don't print
					# out filename
					missingTags+=( "$(printf "%s" "       ${j} tag not found")" )
				fi
			done
				# If missingTags array is not empty, there are missing
				# tags in the current file so log output
				if [[ -n "${missingTags[@]}" ]] ; then
					# Add separator to log for each file
					missingTags+=( "------------------------------------------------------------------" )
					# Print array into log file
					printf "%s\n" "${missingTags[@]}" >> "${METADATA_ERRORS}"
				fi

		# Done analyzing FLAC file tags
		print_done_flac
		fi
	}

	# If COVERART was specified under USER CONFIGURATION
	# set the tag array accordingly and test whether there
	# are missing tags in each FLAC file
	if [[ "${COVERART_WARNING}" == "true" ]] ; then
		title_analyze_tags

		# COVERART is already in the tag array. Implies album
		# artwork is to be kept, so log if COVERART tag is missing
		check_tags () {
			# Let's make sure to kill running children if this
			# function was aborted via SIGINT.  This function
			# will receive SIGTERM from the kill in previous trap
			trap 'kill_jobs ; exit 1' SIGTERM

			# Increment number of FLACs processed
			increment_count

			# Print script operation title
			print_analyzing_tags

			# Analyze FLACs for missing tags
			analyze_tags

			# Print newline into FIFO after completion
			printf '\n' >&3
		}
	else
		# COVERART is not in the tag array, so add it if album artwork
		# is to be kept
		if [[ "${REMOVE_ARTWORK}" == "false" ]] ; then
			title_analyze_tags

			# Analyze tags but don't log COVERART is missing tag
			check_tags () {
				# Let's make sure to kill running children if this
				# function was aborted via SIGINT.  This function
				# will receive SIGTERM from the kill in previous trap
				trap 'kill_jobs ; exit 1' SIGTERM

				# Increment number of FLACs processed
				increment_count

				# Print script operation title
				print_analyzing_tags

				# Analyze FLACs for missing tags
				# (except for COVERART tag)
				analyze_tags_dont_log_coverart

				# Print newline into FIFO after completion
				printf '\n' >&3
			}
		else
			title_analyze_tags

			# Album artwork is NOT kept, so process tag fields, omitting COVERART
			check_tags () {
				# Let's make sure to kill running children if this
				# function was aborted via SIGINT.  This function
				# will receive SIGTERM from the kill in previous trap
				trap 'kill_jobs ; exit 1' SIGTERM

				# Increment number of FLACs processed
				increment_count

				# Print script operation title
				print_analyzing_tags

				# Analyze FLACs for missing tags
				analyze_tags

				# Print newline into FIFO after completion
				printf '\n' >&3
			}
		fi
	fi

	# Make sure the temporary file is cleared before proceeding
	clear_processed_tmp_file

	# Make sure the temporary FIFO is cleared before proceeding
	clear_tmp_fifo

	# Start as many processes as determined by ${CORES}
	for i in "${total_flacs_array[@]:0:${CORES}}" ; do
		check_tags &
	done

	# Add the number of processes started above to count
	ITERATION="${CORES}"

	# If the FLAC files to process are greater than the # of CORES
	# available, continue processing them, else quit
	if [[ "${TOTAL_FLACS}" -gt "${CORES}" ]] ; then

		# After each newline is read from FIFO, start a new process
		while read ; do
			# If current number of FLACs to process is less than total FLACs
			# found, add another FLAC to process
			if [[ "${ITERATION}" -lt "${TOTAL_FLACS_INDICES}" ]] ; then
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				((ITERATION++))
				check_tags &

			# If current number of FLACs to process is the last FLAC file, continue
			# processing it and break out of loop (to prevent hanging FIFO)
			elif [[ "${ITERATION}" -eq "${TOTAL_FLACS_INDICES}" ]] ; then
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				check_tags &
				break
			fi
		done <&3

	fi

	# Wait for children processes
	wait

	# Test for DEPRECATED tag, COVERART in METADATA_ERROR log.  If it
	# exists, set COVERART_WARNING variable to make script output
	# warning upon completion
	if [[ -f "${METADATA_ERRORS}" ]] ; then
		while read i ; do
			# Indentation is culled from reading in "${i}"
			# To change this, set IFS to '\n'
			if [[ "${i}" == "the new format: METADATA_BLOCK_PICTURE." ]] ; then
				COVERART_WARNING="true"
				break
			fi
		done < "${METADATA_ERRORS}"
	fi

	if [[ -f "${METADATA_ERRORS}"  && "${COVERART_WARNING}" == "true" ]] ; then
		# Display COVERART warning function and metadata issues
		printf ''
		coverart_warning
		printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " Some FLAC files have missing tags or there were"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " issues with some of the FLAC files, please check:"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " \"${METADATA_ERRORS}\" for details."
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " Not Re-Tagging files."

		REDO_COMPLETE="false"
		operation_summary

		exit 1
	elif [[ -f "${METADATA_ERRORS}" ]] ; then
		# Just display metadata issues
		printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " Some FLAC files have missing tags or there were"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " issues with some of the FLAC files, please check:"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " \"${METADATA_ERRORS}\" for details."
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " Not Re-Tagging files."

		REDO_COMPLETE="false"
		operation_summary

		exit 1
	fi

	############
	# SET TAGS #
	############

	# Recreate the tags array as it may have added the
	# COVERART tag.  This way, we ensure that the COVERART
	# tag is, in fact, temporary.
	eval "tags=(${EXPORT_TAG})"

	title_setting_tags

	# Set the FLAC metadata to each FLAC file
	remove_set_tags () {
		# Set up 'album_tags_array' associative array
		declare -A album_tags_array

		# Iterate through the tag array and set a variable for each tag
		for j in "${tags[@]}" ; do
			# Check if ALBUMARTIST is in tag array and apply operations on
			# the tag field if it exists
			if [[ "${j}" == "ALBUMARTIST" ]] ; then
				# ALBUMARTIST exists in tag array so allow script to check the
				# various naming conventions within the FLAC files (ie,
				# 'ALBUM ARTIST' or 'ALBUM_ARTIST')

				# "ALBUMARTIST"
				if [[ -n "$(metaflac --show-tag=ALBUMARTIST "${i}")" ]] ; then
					local TEMP_TAG="$(metaflac --show-tag=ALBUMARTIST "${i}")"
				elif [[ -n "$(metaflac --show-tag="ALBUM ARTIST" "${i}")" ]] ; then
					local TEMP_TAG="$(metaflac --show-tag="ALBUM ARTIST" "${i}")"
				elif [[ -n "$(metaflac --show-tag="ALBUM_ARTIST" "${i}")" ]] ; then
					local TEMP_TAG="$(metaflac --show-tag="ALBUM_ARTIST" "${i}")"
				fi
			else
				# Grab current tag "${j}" from FLAC file
				local TEMP_TAG="$(metaflac --show-tag="${j}" "${i}")"
			fi

			# Tag key (ie ARTIST, DATE, etc)
			local TAG_KEY="${TEMP_TAG//=*}"
			# Make uppercase
			local TAG_KEY="${TAG_KEY^^}"

			# Tag field (ie 10 Years, 2001, etc)
			local TAG_VALUE="${TEMP_TAG/#*=}"

			# Put new tag values into associative array
			album_tags_array["${TAG_KEY}"]="${TAG_VALUE}"
		done
	
		# Iterate through the tag array and add the saved tags back.
		# Use process substitution to allow this to finish if user
		# invokes SIGINT
		metaflac --remove-all-tags --import-tags-from=- "${i}" \
			< <(for j in "${tags[@]}" ; do
				printf "%s\n" "${j}=${album_tags_array["${j}"]}"
			done)
	}

	# Actual function to re-tag FLAC files
	retag_flacs () {
		# Let's make sure to kill running children if this
		# function was aborted via SIGINT.  This function
		# will receive SIGTERM from the kill in previous trap
		trap 'kill_jobs ; exit 1' SIGTERM

		# Increment number of FLACs processed
		increment_count

		print_setting_tags

		# Remove and set new tags
		remove_set_tags

		print_ok_flac

		# Print newline into FIFO after completion
		printf '\n' >&3
	}

	# Make sure the temporary file is cleared before proceeding
	clear_processed_tmp_file

	# Make sure the temporary FIFO is cleared before proceeding
	clear_tmp_fifo

	# Start as many processes as determined by ${CORES}
	for i in "${total_flacs_array[@]:0:${CORES}}" ; do
		retag_flacs &
	done

	# Add the number of processes started above to count
	ITERATION="${CORES}"

	# If the FLAC files to process are greater than the # of CORES
	# available, continue processing them, else quit
	if [[ "${TOTAL_FLACS}" -gt "${CORES}" ]] ; then

		# After each newline is read from FIFO, start a new process
		while read ; do

			# If current number of FLACs to process is less than total FLACs
			# found, add another FLAC to process
			if [[ "${ITERATION}" -lt "${TOTAL_FLACS_INDICES}" ]] ; then
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				((ITERATION++))
				retag_flacs &

			# If current number of FLACs to process is the last FLAC file, continue
			# processing it and break out of loop (to prevent hanging FIFO)
			elif [[ "${ITERATION}" -eq "${TOTAL_FLACS_INDICES}" ]] ; then
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				retag_flacs &
				break
			fi
		done <&3

	fi

	# Wait for children processes
	wait

	# Redo Tags completed successfully
	REDO_COMPLETE="true"
}

#################
#  PRUNE FLACS  #
#################
# Clear excess FLAC metadata from each FLAC file
prune_flacs () {
	title_prune_flac

	# Abort script and check for any errors thus far
	prune_abort () {
		print_interrupt

		# Kill running children
		kill_jobs

		printf "\n%s${BOLD_GREEN}%s${NORMAL}%s\n" \
		" " "*" " Control-C received, generating summary. Please wait..."

		if [[ -f "${PRUNE_ERRORS}" ]] ; then
			printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " There were issues with some of the FLAC files,"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " please check:"
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " \"${PRUNE_ERRORS}\" for details."
		fi

		PRUNE_COMPLETE="interrupt"
		operation_summary

		exit 1
	}

	# Trap SIGINT (Control-C) to abort cleanly	
	trap prune_abort SIGINT

	prune_f () {
		# Let's make sure to kill running children if this
		# function was aborted via SIGINT.  This function
		# will receive SIGTERM from the kill in previous trap
		trap 'kill_jobs ; exit 1' SIGTERM

		# Increment number of FLACs processed
		increment_count

		print_prune_flac

		# Check if file is a FLAC file (hide output) and send to
		# background to allow killing on SIGTERM
		metaflac --show-md5sum "${i}" >/dev/null 2>&1 &

		# Wait on background process and return exit code of
		# said process
		wait "${!}"

		# Exit code 130 is SIGINT so only check for exit code '1'
		if [[ "${?}" -eq "1" ]] ; then
			# File is not a FLAC file, display failed
			print_failed_flac
			printf "%s\n%s\n%s\n" \
				   "FLAC:  ${i}" \
				   "ERROR: The above file does not appear to be a FLAC file" \
				   "------------------------------------------------------------------" \
				   >> "${PRUNE_ERRORS}"
		else
			# Remove all information but STREAMINFO,VORBIS_COMMENTs, and
			# possibly METADATA_BLOCK_PICTURE
			metaflac --remove --dont-use-padding --except-block-type="${DONT_PRUNE_FLAC_METADATA}" "${i}"

			# File is a FLAC file, display ok
			print_ok_flac
		fi

		# Print newline into FIFO after completion
		printf '\n' >&3
	}
	
	# Don't remove artwork if user wants it kept.  We don't have to check
	# for the legacy COVERART tag as we are NOT removing any VORBIS_COMMENTs.
	if [[ "${REMOVE_ARTWORK}" == "true" ]] ; then
		# Remove artwork (exported for subshell access)
		DONT_PRUNE_FLAC_METADATA="STREAMINFO,VORBIS_COMMENT"
	else
		# Don't remove artwork (exported for subshell access)
		DONT_PRUNE_FLAC_METADATA="STREAMINFO,PICTURE,VORBIS_COMMENT"
	fi

	# Make sure the temporary file is cleared before proceeding
	clear_processed_tmp_file

	# Make sure the temporary FIFO is cleared before proceeding
	clear_tmp_fifo

	# Start as many processes as determined by ${CORES}
	for i in "${total_flacs_array[@]:0:${CORES}}" ; do
		prune_f &
	done

	# Add the number of processes started above to count
	ITERATION="${CORES}"

	# If the FLAC files to process are greater than the # of CORES
	# available, continue processing them, else quit
	if [[ "${TOTAL_FLACS}" -gt "${CORES}" ]] ; then

		# After each newline is read from FIFO, start a new process
		while read ; do
			# If current number of FLACs to process is less than total FLACs
			# found, add another FLAC to process
			if [[ "${ITERATION}" -lt "${TOTAL_FLACS_INDICES}" ]] ; then
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				((ITERATION++))
				prune_f &

			# If current number of FLACs to process is the last FLAC file, continue
			# processing it and break out of loop (to prevent hanging FIFO)
			elif [[ "${ITERATION}" -eq "${TOTAL_FLACS_INDICES}" ]] ; then
				# Set ${i} to current FLAC to process
				i="${total_flacs_array[${ITERATION}]}"
				prune_f &
				break
			fi
		done <&3

	fi

	# Wait for children processes
	wait

	if [[ -f "${PRUNE_ERRORS}" ]] ; then
		printf "\n%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " There were issues with some of the FLAC files,"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " please check:"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " \"${PRUNE_ERRORS}\" for details."
	fi

	# Prune FLACS completed successfully
	PRUNE_COMPLETE="true"
}

#######################
#  DISPLAY LONG HELP  #
#######################
# Display a lot of help
long_help () {
LONG_HELP="   Usage: ${0} [OPTION] [OPTION]... [PATH_TO_FLAC(s)]
   Options:
    -c, --compress
           Compress the FLAC files with the user-specified level of compression
           defined under USER CONFIGURATION (as the variable COMPRESSION_LEVEL)
           and verify the resultant files.

           The default is 8, with the range of values starting from 1 to 8 with
           the smallest compression at 1, and the highest at 8.  This option
           will add a tag to all successfully verified FLAC files.  Below
           shows the default COMPRESSION tag added to each successfully
           verified FLAC:

                       COMPRESSION=8

           If any FLAC files already have the defined COMPRESSION_LEVEL tag (a
           good indicator the files are already compressed at that level), the
           script will instead test the FLAC files for any errors.  This is useful
           to check your entire music library to make sure all the FLAC files are
           compressed at the level specified as well as make sure they are intact.

           If any files are found to be corrupt, this script will quit upon
           finishing the compression of any other files and produce an error
           log.

    -C, --compress-notest
           Same as the '--compress' option, but if any FLAC files already have the
           defined COMPRESSION_LEVEL tag, the script will skip the file and continue
           on to the next without test the FLAC file's integrity.  Useful for
           checking all your FLAC files are compressed at the level specified.

    -t, --test
           Same as compress but instead of compressing the FLAC files, this
           script just verfies the files.  This option will NOT add the
           COMPRESSION tag to the files.

           As with the '--compress' option, this will produce an error log if
           any FLAC files are found to be corrupt.

    -a, --aucdtect
           Uses the auCDtect program by Oleg Berngardt and Alexander Djourik to
           analyze FLAC files and check with fairly accurate precision whether
           the FLAC files are lossy sourced or not.  For example, an MP3 file
           converted to FLAC is no longer lossless therefore lossy sourced.

           While this program isn't foolproof, it gives a good idea which FLAC
           files will need further investigation (ie a spectrogram).  This program
           does not work on FLAC files which have a bit depth more than a typical
           audio CD (16bit), and will skip the files that have a higher bit depth.

           If any files are found to not be perfect (100% CDDA), a log will be created
           with the questionable FLAC files recorded in it.

    -A, --aucdtect-spectrogram
           Same as '-a, --aucdtect' with the addition of creating a spectrogram for
           each FLAC file that fails auCDtect, that is, any FLAC file that does not
           return 100% CDDA from auCDtect will be scanned and a spectrogram will be
           created.

           Any FLAC file skipped (due to having a higher bit depth than 16), will
           NOT have a spectrogram created.

           By default, each spectrogram will be created in the same folder as the
           tested FLAC file with the same name as the tested FLAC file:

               03 - Some FLAC File.flac --> 03 - Some FLAC File.png

           If there already is a PNG file with the same name as the tested FLAC,
           the name 'spectrogram' will prepend the '.png' extension:

               03 - Some FLAC File.flac --> 03 - Some FLAC File.spectrogram.png

           The user can change the location of where to store the created
           spectrogram images by changing the value of SPECTROGRAM_LOCATION under
           the USER CONFIGURATION section of this script.  The location defined by
           the user will be tested to see if it exists before starting the script.
           If the location does NOT exist, the script will warn the user and exit.

           The created PNG file is large in resolution to best capture the
           FLAC file's waveform (roughly 5140x2149).

           The spectrogram is created using the program SoX.  If the user tries
           to use this option without having SoX installed, the script will warn
           the user that SoX is missing and exit.

    -m, --md5check
           Check the FLAC files for unset MD5 Signatures and log the output of
           any unset signatures.  An unset MD5 signature doesn't necessarily mean
           a FLAC file is corrupt, and can be repaired with a re-encoding of said
           FLAC file.

    -p, --prune
           Delete every METADATA block in each FLAC file except the STREAMINFO and
           VORBIS_COMMENT block.  If REMOVE_ARTWORK is set to 'false', then the
           PICTURE block will NOT be removed.

    -g, --replaygain
           Add ReplayGain tags to the FLAC files.  The ReplayGain is calculated
           for ALBUM and TRACK values. ReplayGain is applied via VORBIS_TAGS and
           as such, will require the redo, '--r argument' to have these tags kept
           in order to preserve the added ReplayGain values.  The tags added are:

                      REPLAYGAIN_REFERENCE_LOUDNESS
                      REPLAYGAIN_TRACK_GAIN
                      REPLAYGAIN_TRACK_PEAK
                      REPLAYGAIN_ALBUM_GAIN
                      REPLAYGAIN_ALBUM_PEAK

           This option ignores any ReplayGain tags that may already be set,
           removing existing values before applying new ones.

           In order for the ReplayGain values to be applied correctly, the
           script has to determine which FLAC files to add values by directory.
           What this means is that the script must add the ReplayGain values by
           working off the FLAC files' parent directory.  If there are some FLAC
           files found, the script will move up one directory and begin applying
           the ReplayGain values.  This is necessary in order to get the
           REPLAYGAIN_ALBUM_GAIN and REPLAYGAIN_ALBUM_PEAK values set correctly.
           Without doing this, the ALBUM and TRACK values would be identical.

           If a user has many FLAC files under one directory (of different
           albums/artists), the ReplayGain ALBUM values are going to be incorrect
           as the script will perceive all those FLAC files to essentially be
           from the same album.  This is mitigated by having your music library
           somewhat organized with each album housing the correct FLAC files and
           no others.  Keep in mind, multi-disc albums must be in separate folders
           in order to be processed with different ALBUM GAIN and PEAK values.

           If there are any errors found while creating the ReplayGain values
           and/or setting the values, an error log will be produced.

    -G, --replaygain-noforce
           Same as '-g, --replaygain' but will check for existing ReplayGain
           tags before reapplying new ones.  If any one of the five ReplayGain
           tags are missing from any FLAC file, the script will apply new values
           to each FLAC file in that folder (first removing the old ReplayGain
           tags - if any).

           If all five ReplayGain tags are intact in every FLAC
           file in a directory, that directory will be skipped and no new
           ReplayGain tags will be added.

    -r, --redo
           Extract the configured tags in each FLAC file and clear the rest before
           retagging the file.  The default tags kept are:

                      TITLE
                      ARTIST
                      ALBUM
                      DISCNUMBER
                      DATE
                      TRACKNUMBER
                      TRACKTOTAL
                      GENRE
                      COMPRESSION
                      RELEASETYPE
                      SOURCE
                      MASTERING
                      REPLAYGAIN_REFERENCE_LOUDNESS
                      REPLAYGAIN_TRACK_GAIN
                      REPLAYGAIN_TRACK_PEAK
                      REPLAYGAIN_ALBUM_GAIN
                      REPLAYGAIN_ALBUM_PEAK

           If any FLAC files have missing tags (from those configured to be kept),
           the file and the missing tag will be recorded in a log.

           The tags that can be kept are eseentially infinite, as long as the
           tags to be kept are set in the tag configuration located at the top of
           this script under USER CONFIGURATION.

           If this option is specified, a warning will appear upon script
           execution.  This warning will show which of the configured TAG fields
           to keep when re-tagging the FLAC files.  A countdown will appear
           giving the user 10 seconds to abort the script, after which, the script
           will begin running it's course.

    -l, --all
           This option is short for:

                      -c, --compress
                      -m, --md5check
                      -p, --prune
                      -g, --replaygain
                      -r, --redo

           If any of these options (or variations of the above options) are called, this
           script will warn the user of conflicting options and exit.

    -L, --reallyall
           This option is short for:

                      -c, --compress
                      -m, --md5check
                      -p, --prune
                      -g, --replaygain
                      -r, --redo
                      -A, --aucdtect-spectrogram

           If any of these options (or variations of the above options) are called, this
           script will warn the user of conflicting options and exit.

    -n, --no-color
           Turn off color output.

    -v, --version
           Display script version and exit.

    -h, --help
           Shows this help message.

           This script can use more than one CPU/Cores (threads).  By default, this script will
           use two (2) threads, which can be configured under USER CONFIGURATION (located near the top
           of this script).

           Multithreading is achieved by utilizing the 'xargs' command which comes bundled with the
           'find' command.  While not true multithreading, this psuedo multithreading will greatly speed
           up the processing if the host has more than one CPU.


  Invocation Examples:
    # Compress and verify FLAC files
    ${0} --compress /media/Music_Files

    # Same as above but check MD5 Signature of all FLAC files if all files are verified as OK
    # from previous command
    ${0} -c -m Music/FLACS    <--- **RELATIVE PATHS ALLOWED**

    # Same as above but remove the SEEKTABLE and excess PADDING in all of the FLAC files if all
    # files are verified as OK from previous command
    ${0} -c -m -p /some/path/to/files

    # Same as above but with long argument notation
    ${0} --compress --md5check --prune /some/path/to/files

    # Same as above but with mixed argument notation
    ${0} --compress -m -p /some/path/to/files

    # Clear excess tags from each FLAC file
    ${0} --redo /some/path/to/files

    # Compress FLAC files and redo the FLAC tags
    ${0} -c -r /some/path/to/files"

# Print out help (will be piped to ${PAGER} elsewhere)
printf "%s\n" "${LONG_HELP}"
}

########################
#  DISPLAY SHORT HELP  #
########################
# Display short help
short_help () {
	printf "%s\n" "   Usage: ${0} [OPTION] [OPTION]... [PATH_TO_FLAC(s)]"
	printf "%s\n" "   Options:"
	printf "%s\n" "     -c, --compress"
	printf "%s\n" "     -C, --compress-notest"
	printf "%s\n" "     -t, --test"
	printf "%s\n" "     -m, --md5check"
	printf "%s\n" "     -a, --aucdtect"
	printf "%s\n" "     -A, --aucdtect-spectrogram"
	printf "%s\n" "     -p, --prune"
	printf "%s\n" "     -g, --replaygain"
	printf "%s\n" "     -G, --replaygain-noforce"
	printf "%s\n" "     -r, --redo"
	printf "%s\n" "     -l, --all"
	printf "%s\n" "     -L, --reallyall"
	printf "%s\n" "     -n, --no-color"
	printf "%s\n" "     -v, --version"
	printf "%s\n" "     -h, --help"
	printf "%s\n" "   This is the short help; for details use '${0} --help' or '${0} -h'"
}

############################
#  DISPLAY SCRIPT VERSION  #
############################
# Display script version
print_version () {
	printf "%s\n" "Version ${VERSION}"
}

######################################
#  DETERMINE NUMBER OF CORES TO USE  #
######################################
find_cores () {
	# Check if CORES was set under USER CONFIGURATION
	if [[ "${CORES}" == "proc" || -z "${CORES}" ]] ; then
		# User did NOT set CORES, or was set to "proc",
		# check /proc/cpuinfo

		# Check if /proc is mounted by comparing device numbers of
		# /proc and / and see if they don't match (ie, /proc is mounted)
		if [[ "$(stat -c %d%D /proc)" == "$(stat -c %d%D /)" ]] ; then
			# /proc is not mounted
			CORES=2
		else
			# /proc is mounted, check for cpuinfo
			if [[ ! -f /proc/cpuinfo ]] ; then
				# /proc/cpuinfo doesn't exist
				CORES=2
			else
				# /proc/cpuinfo exists, find total number
				# of cores to use

				# Store contents of /proc/cpuinfo into
				# CORES_ARRAY array
				mapfile -n0 -t CORES_ARRAY < /proc/cpuinfo

				# For each line, if matched string is found,
				# add processor number to CORES variable
				for i in "${CORES_ARRAY[@]}" ; do
					if [[ "${i}" == processor$'\t':\ * ]] ; then
						CORES="${i#processor$'\t': }"
					fi
				done

				# Add +1 to CORES since the number of useable cores
				# starts at 0
				CORES="$((${CORES} + 1))"
			fi
		fi
	fi
}

##################################
#  DISPLAY COMPLETED OPERATIONS  #
##################################
operation_summary () {
	# Grab the number of processed FLAC files
	mapfile -n0 PROCESSED_FLACS_ARR < "${PROCESSED_TMP_FILE}"

	# Change the above array to variable
	PROCESSED_FLACS_DIGITS="${#PROCESSED_FLACS_ARR[@]}"

	# Find the percentage of Processed Flacs / Total Flacs
	PERCENTAGE_DIGITS="$(( ${PROCESSED_FLACS_DIGITS} * 100 / ${TOTAL_FLACS} ))"

	# Set up spacing for Processed Flacs
	case "${#PROCESSED_FLACS_DIGITS}" in
		1)
			PROCESSED_FLAC_SPACING="     "
		;;
		2)
			PROCESSED_FLAC_SPACING="    "
		;;
		3)
			PROCESSED_FLAC_SPACING="   "
		;;
		4)
			PROCESSED_FLAC_SPACING="  "
		;;
		5)
			PROCESSED_FLAC_SPACING=" "
		;;
		6)
			PROCESSED_FLAC_SPACING=""
		;;
	esac

	# Set up spacing for Total Flacs
	case "${#TOTAL_FLACS}" in
		1)
			TOTAL_FLAC_SPACING="     "
		;;
		2)
			TOTAL_FLAC_SPACING="    "
		;;
		3)
			TOTAL_FLAC_SPACING="   "
		;;
		4)
			TOTAL_FLAC_SPACING="  "
		;;
		5)
			TOTAL_FLAC_SPACING=" "
		;;
		6)
			TOTAL_FLAC_SPACING=""
		;;
	esac


	# Set up spacing for Percentage
	case "${#PERCENTAGE_DIGITS}" in
		1)
			PERCENTAGE_SPACING="   "
		;;
		2)
			PERCENTAGE_SPACING="  "
		;;
		3)
			PERCENTAGE_SPACING=" "
		;;
	esac

	# Build the operation line in the Summary Of Operations
	summary_line () {
		# Set up spacing for Operation
		case "${OPERATION}" in
			"auCDtect")
				OPERATION_SPACING="    "
			;;
			"Compress")
				OPERATION_SPACING="    "
			;;
			"Test Flacs")
				OPERATION_SPACING="  "
			;;
			"MD5 Check")
				OPERATION_SPACING="   "
			;;
			"ReplayGain")
				OPERATION_SPACING="  "
			;;
			"Redo Tags")
				OPERATION_SPACING="   "
			;;
			"Prune Flacs")
				OPERATION_SPACING=" "
			;;
		esac

		case "${OPERATION_SUMMARY}" in
			"complete")
				# Example of printed string below:
				# '   │ MD5 Check   │  Completed  │   104 / 104   │ 100% │'

				# Set up the printed string with colors
				printf "%s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
				\
				"   " "│" " " "${OPERATION}" "${OPERATION_SPACING}" "│" \
				"  " "Completed" "  " "│" \
				"${TOTAL_FLAC_SPACING}" "${TOTAL_FLACS}" \
				" " "/" " " \
				"${TOTAL_FLACS}" "${TOTAL_FLAC_SPACING}" \
				"│" " " "100%" " " "│"
			;;

			"failed")
				# Example of printed string below:
				# '   │ MD5 Check   │   Failed    │   104 / 104   │ 100% │'

				# Set up the printed string with colors
				printf "%s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_RED}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_RED}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
				\
				"   " "│" " " "${OPERATION}" "${OPERATION_SPACING}" "│" \
				"   " "Failed" "    " "│" \
				"${TOTAL_FLAC_SPACING}" "${TOTAL_FLACS}" \
				" " "/" " " \
				"${TOTAL_FLACS}" "${TOTAL_FLAC_SPACING}" \
				"│" " " "100%" " " "│"
			;;

			"interrupted")
				# Example of printed string below:
				# '   │ MD5 Check   │ Interrupted │    24 / 104   │  23% │'

				# Set up the printed string with colors
				printf "%s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${CYAN}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
				\
				"   " "│" " " "${OPERATION}" "${OPERATION_SPACING}" "│" \
				" " "Interrupted" " " "│" \
				"${PROCESSED_FLAC_SPACING}" "${PROCESSED_FLACS_DIGITS}" \
				" " "/" " " \
				"${TOTAL_FLACS}" "${TOTAL_FLAC_SPACING}" \
				"│" "${PERCENTAGE_SPACING}" "${PERCENTAGE_DIGITS}%" " " "│"
			;;

			"did not run")
				# Example of printed string below:
				# '   │ MD5 Check   │ Did Not Run │     0 / 104   │   0% │'

				# Set up the printed string with colors
				printf "%s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${MAGENTA}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_RED}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_RED}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
				\
				"   " "│" " " "${OPERATION}" "${OPERATION_SPACING}" "│" \
				" " "Did Not Run" " " "│" \
				"     " "0" \
				" " "/" " " \
				"${TOTAL_FLACS}" "${TOTAL_FLAC_SPACING}" \
				"│" "   " "0%" " " "│"
			;;

			*)
				# Should not ever happen!
			;;
		esac
	}

	# Begin printing the table
	printf "\n%s${BOLD_BLUE}%s${NORMAL}\n" \
	"   " "┌───────────────────────────┬──────────────────────┐"
	printf "%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
	"   " "│" "   Summary Of Operations   " "│" " # Of Processed Flacs " "│"
	printf "%s${BOLD_BLUE}%s${NORMAL}\n" \
	"   " "├─────────────┬─────────────┼───────────────┬──────┤"

	# auCDtect operations
	if [[ "${AUCDTECT}" == "true" && "${AUCDTECT_COMPLETE}" == "true" ]] ; then
		OPERATION="auCDtect"
		OPERATION_SUMMARY="complete"
		summary_line
	elif [[ "${AUCDTECT}" == "true" && "${AUCDTECT_COMPLETE}" == "false" ]] ; then
		OPERATION="auCDtect"
		OPERATION_SUMMARY="failed"
		summary_line
	elif [[ "${AUCDTECT}" == "true" && "${AUCDTECT_COMPLETE}" == "interrupt" ]] ; then
		OPERATION="auCDtect"
		OPERATION_SUMMARY="interrupted"
		summary_line
	elif [[ "${AUCDTECT}" == "true" ]] ; then
		OPERATION="auCDtect"
		OPERATION_SUMMARY="did not run"
		summary_line
	fi

	# Compress Flacs operations
	if [[ "${COMPRESS}" == "true" && "${COMPRESS_COMPLETE}" == "true" ]] ; then
		OPERATION="Compress"
		OPERATION_SUMMARY="complete"
		summary_line
	elif [[ "${COMPRESS}" == "true" && "${COMPRESS_COMPLETE}" == "false" ]] ; then
		OPERATION="Compress"
		OPERATION_SUMMARY="failed"
		summary_line
	elif [[ "${COMPRESS}" == "true" && "${COMPRESS_COMPLETE}" == "interrupt" ]] ; then
		OPERATION="Compress"
		OPERATION_SUMMARY="interrupted"
		summary_line
	elif [[ "${COMPRESS}" == "true" ]] ; then
		OPERATION="Compress"
		OPERATION_SUMMARY="did not run"
		summary_line
	fi

	# Test Flacs operations
	if [[ "${TEST}" == "true" && "${TEST_COMPLETE}" == "true" ]] ; then
		OPERATION="Test Flacs"
		OPERATION_SUMMARY="complete"
		summary_line
	elif [[ "${TEST}" == "true" && "${TEST_COMPLETE}" == "false" ]] ; then
		OPERATION="Test Flacs"
		OPERATION_SUMMARY="failed"
		summary_line
	elif [[ "${TEST}" == "true" && "${TEST_COMPLETE}" == "interrupt" ]] ; then
		OPERATION="Test Flacs"
		OPERATION_SUMMARY="interrupted"
		summary_line
	elif [[ "${TEST}" == "true" ]] ; then
		OPERATION="Test Flacs"
		OPERATION_SUMMARY="did not run"
		summary_line
	fi

	# MD5 Check operations
	if [[ "${MD5CHECK}" == "true" && "${MD5CHECK_COMPLETE}" == "true" ]] ; then
		OPERATION="MD5 Check"
		OPERATION_SUMMARY="complete"
		summary_line
	elif [[ "${MD5CHECK}" == "true" && "${MD5CHECK_COMPLETE}" == "false" ]] ; then
		OPERATION="MD5 Check"
		OPERATION_SUMMARY="failed"
		summary_line
	elif [[ "${MD5CHECK}" == "true" && "${MD5CHECK_COMPLETE}" == "interrupt" ]] ; then
		OPERATION="MD5 Check"
		OPERATION_SUMMARY="interrupted"
		summary_line
	elif [[ "${MD5CHECK}" == "true" ]] ; then
		OPERATION="MD5 Check"
		OPERATION_SUMMARY="did not run"
		summary_line
	fi

	# ReplayGain operations
	if [[ "${REPLAYGAIN}" == "true" && "${REPLAYGAIN_COMPLETE}" == "true" ]] ; then
		OPERATION="ReplayGain"
		OPERATION_SUMMARY="complete"
		summary_line
	elif [[ "${REPLAYGAIN}" == "true" && "${REPLAYGAIN_COMPLETE}" == "false" ]] ; then
		OPERATION="ReplayGain"
		OPERATION_SUMMARY="failed"
		summary_line
	elif [[ "${REPLAYGAIN}" == "true" && "${REPLAYGAIN_COMPLETE}" == "interrupt" ]] ; then
		OPERATION="ReplayGain"
		OPERATION_SUMMARY="interrupted"
		summary_line
	elif [[ "${REPLAYGAIN}" == "true" ]] ; then
		OPERATION="ReplayGain"
		OPERATION_SUMMARY="did not run"
		summary_line
	fi

	# Redo Tags operations
	if [[ "${REDO}" == "true" && "${REDO_COMPLETE}" == "true" ]] ; then
		OPERATION="Redo Tags"
		OPERATION_SUMMARY="complete"
		summary_line
	elif [[ "${REDO}" == "true" && "${REDO_COMPLETE}" == "false" ]] ; then
		OPERATION="Redo Tags"
		OPERATION_SUMMARY="failed"
		summary_line
	elif [[ "${REDO}" == "true" && "${REDO_COMPLETE}" == "interrupt" ]] ; then
		OPERATION="Redo Tags"
		OPERATION_SUMMARY="interrupted"
		summary_line
	elif [[ "${REDO}" == "true" ]] ; then
		OPERATION="Redo Tags"
		OPERATION_SUMMARY="did not run"
		summary_line
	fi

	# Prune Flacs operations
	if [[ "${PRUNE}" == "true" && "${PRUNE_COMPLETE}" == "true" ]] ; then
		OPERATION="Prune Flacs"
		OPERATION_SUMMARY="complete"
		summary_line
	elif [[ "${PRUNE}" == "true" && "${PRUNE_COMPLETE}" == "false" ]] ; then
		OPERATION="Prune Flacs"
		OPERATION_SUMMARY="failed"
		summary_line
	elif [[ "${PRUNE}" == "true" && "${PRUNE_COMPLETE}" == "interrupt" ]] ; then
		OPERATION="Prune Flacs"
		OPERATION_SUMMARY="interrupted"
		summary_line
	elif [[ "${PRUNE}" == "true" ]] ; then
		OPERATION="Prune Flacs"
		OPERATION_SUMMARY="did not run"
		summary_line
	fi

	# Below creates the legend
	printf "%s${BOLD_BLUE}%s${NORMAL}\n" \
	"   " "├─────────────┴─────────────┴───────────────┴──────┤"
	printf "%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
	"   " "│" "                      Legend                      " "│"
	printf "%s${BOLD_BLUE}%s${NORMAL}\n" \
	"   " "├──────────────────────────────────────────────────┤"
	printf "%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s\n" \
	"   " "│" "   " "Completed" " " ":" " Entire operation completed without " "│"
	printf "%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
	"   " "│" "               any issues.                        " "│"
	printf "%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
	"   " "│" "                                                  " "│"
	printf "%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_RED}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s\n" \
	"   " "│" "      " "Failed" " " ":" " Entire operation completed, but    " "│"
	printf "%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
	"   " "│" "               some files have issues.            " "│"
	printf "%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
	"   " "│" "                                                  " "│"
	printf "%s${BOLD_BLUE}%s${NORMAL}%s${CYAN}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s\n" \
	"   " "│" " " "Interrupted" " " ":" " Operation halted by user via the   " "│"
	printf "%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
	"   " "│" "               SIGINT signal (Control-C).         " "│"
	printf "%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
	"   " "│" "                                                  " "│"
	printf "%s${BOLD_BLUE}%s${NORMAL}%s${MAGENTA}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s\n" \
	"   " "│" " " "Did Not Run" " " ":" " Operation did not run due to       " "│"
	printf "%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
	"   " "│" "               interruption from user or failure  " "│"
	printf "%s${BOLD_BLUE}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
	"   " "│" "               of the previous operation.         " "│"
	printf "%s${BOLD_BLUE}%s${NORMAL}\n" \
	"   " "└──────────────────────────────────────────────────┘"

	## CLEANUP SECTION ##
	# Remove temporary file
	rm -f "${PROCESSED_TMP_FILE}"

	# Remove temporary FIFO
	rm -f "${TMP_FIFO}"

	# Restore old stty settings, make stty happy
	# by redirecting /dev/stderr
	stty ${OLD_STTY} < /dev/stderr
}

#######################
#  PRE-SCRIPT CHECKS  #
#######################
# Make sure we are running BASH 4.1 or greater
BASH_VERSION_CHECK="${BASH_VERSION%.*}"
if [[ "${BASH_VERSION_CHECK}" < 4.1 ]] ; then
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " You must be running BASH version 4.1 or greater to use"
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " this program!"
	exit 1
fi

	###################################
	#  PROCESS POSITIONAL PARAMETERS  #
	###################################
# If no arguments are made to the script show usage
if [[ "${#}" -eq 0 ]] ; then
	short_help
	exit 1
fi

# Add case where only one argument is specified
if [[ "${#}" -eq 1 ]] ; then
	case "${1}" in
		--version|-v)
			print_version
			exit 0
		;;
		--help|-h)
			# Check for ${PAGER}. If a pager is available
			# lets use it. If not, just display help
			if [[ -n "${PAGER}" ]] ; then
				long_help | "${PAGER}"
				exit 0
			else
				long_help
				exit 0
			fi
		;;
		*)
			short_help
			exit 1
		;;
	esac
fi

# Add case where two arguments are specified and the
# arguments called are not to have anything after them
if [[ "${#}" -eq 2 ]] ; then
	case "${1}" in
		--no-color|-n)
			short_help
			exit 1
		;;
		--version|-v)
			short_help
			exit 1
		;;
		--help|-h)
			short_help
			exit 1
		;;
	esac
fi

# Separate the long and short style arguments into their
# own arrays as well as capture the last non-arguements, to
# prevent multiple directories being called
for i in "${@}" ; do
	if [[ "${i}" == --* ]] ; then
		long_style_arguments+=( "${i}" )
	elif [[ "${i}" == -* ]] ; then
		short_style_arguments+=( "${i}" )
	else
		non_arguments+=( "${i}" )
	fi
done

# If there are 0 (zero) directories or more than 1, exit script
if [[ "${#non_arguments[@]}" -eq 0 || "${#non_arguments[@]}" -gt 1 ]] ; then
	short_help
	exit 1
fi

# If there were any long style arguments called, convert them
# to short style in order for getopts to be able to process
# them correctly (ignoring "--help" and "--version" since
# this is taken care of above).  Add invalid arguments to it's
# own array
if [[ -n "${long_style_arguments[@]}" ]] ; then
	for i in "${long_style_arguments[@]}" ; do
		case "${i}" in
			--compress)
				converted_arguments+=( -c )
			;;
			--compress-notest)
				converted_arguments+=( -C )
			;;
			--test)
				converted_arguments+=( -t )
			;;
			--md5check)
				converted_arguments+=( -m )
			;;
			--aucdtect)
				converted_arguments+=( -a )
			;;
			--aucdtect-spectrogram)
				converted_arguments+=( -A )
			;;
			--prune)
				converted_arguments+=( -p )
			;;
			--replaygain)
				converted_arguments+=( -g )
			;;
			--replaygain-noforce)
				converted_arguments+=( -G )
			;;
			--redo)
				converted_arguments+=( -r )
			;;
			--all)
				converted_arguments+=( -l )
			;;
			--reallyall)
				converted_arguments+=( -L )
			;;
			--no-color)
				converted_arguments+=( -n )
			;;
			--version)
				short_help
				exit 1
			;;
			--help)
				short_help
				exit 1
			;;
			*)
				# Set invalid argument into array
				INVALID_ARGUMENTS+=( "${i}" )
			;;
		esac
	done
fi

# If there were any short style arguments called, go through
# them, adding the valid arguments to the "converted_arguments"
# array and adding invalid arguments to it's own array
if [[ -n "${short_style_arguments[@]}" ]] ; then
	while getopts ":LlcCtgGaAmprnhv" ARGUMENTS "${short_style_arguments[@]}" ; do
		case "${ARGUMENTS}" in
			l)
				converted_arguments+=( -l )
			;;
			L)
				converted_arguments+=( -L )
			;;
			c)
				converted_arguments+=( -c )
			;;
			C)
				converted_arguments+=( -C )
			;;
			t)
				converted_arguments+=( -t )
			;;
			g)
				converted_arguments+=( -g )
			;;
			G)
				converted_arguments+=( -G )
			;;
			a)
				converted_arguments+=( -a )
			;;
			A)
				converted_arguments+=( -A )
			;;
			m)
				converted_arguments+=( -m )
			;;
			p)
				converted_arguments+=( -p )
			;;
			r)
				converted_arguments+=( -r )
			;;
			n)
				converted_arguments+=( -n )
			;;
			h)
				converted_arguments+=( -h )
			;;
			v)
				converted_arguments+=( -v )
			;;
			?)
				# Set invalid argument from getopts into
				# array using ${OPTARG}
				INVALID_ARGUMENTS+=( "-${OPTARG}" )
			;;
		esac
	done
fi

# If there were invalid arguments called, display them and
# exit script
if [[ -n "${INVALID_ARGUMENTS}" ]] ; then
	short_help
	printf "\n%s${BOLD_RED}%s${NORMAL}%s" \
	" " "*" " Invalid options:"

	for i in "${INVALID_ARGUMENTS[@]}" ; do
		printf "%s" " ${i}"
	done
	printf '\n'
	exit 1
fi

# Run through all the converted arguments and set up the correct
# values based on what the user called, thereby allowing the
# script to process said values and execute the corresponding
# functions
for i in "${converted_arguments[@]}" ; do
	case "${i}" in
		-l)
			ALL="true"
		;;
		-L)
			REALLYALL="true"
		;;
		-c)
			COMPRESS="true"
			COMPRESS_TEST="true"
		;;
		-C)
			COMPRESS="true"
			export SKIP_TEST="true"
		;;
		-t)
			TEST="true"
		;;
		-g)
			REPLAYGAIN="true"
			# Below used only once to test for
			# command compatibility
			REPLAYGAIN_FORCE="true"
		;;
		-G)
			REPLAYGAIN="true"
			REPLAYGAIN_NOFORCE="true"
		;;
		-a)
			AUCDTECT="true"
			# Not used in subshell(s)
			NO_SPECTROGRAM="true"
		;;
		-A)
			AUCDTECT="true"
			export CREATE_SPECTROGRAM="true"
		;;
		-m)
			MD5CHECK="true"
		;;
		-p)
			PRUNE="true"
		;;
		-r)
			REDO="true"
		;;
		-n)
			NO_COLOR="true"
		;;
		-v)
			short_help
			exit 1
		;;
		-h)
			short_help
			exit 1
		;;
		*)
			# Should not ever happen!
			printf "%s${BOLD_RED}%s${NORMAL}%s\n%s\n" \
			" " "*" " This is a BUG! Please report to:" \
			"   https://github.com/sirjaren/redoflacs/issues/new"
			exit 1
		;;
	esac
done

# Put all the called arguments into an array
called_arguments_array=( "${@}" )

# Set the last argument as the directory and remove the
# ending slash (if any) to prevent double slashes from
# appearing because of BASH's globstar.
#
# This only appears if the directory chosen is the direct
# parent directory to the FLAC files to be processed.
#
# BASH 4.2 allows negative indices:
#
# DIRECTORY="${called_arguments_array[-1]%/}"
DIRECTORY="${called_arguments_array[$(( ${#called_arguments_array[@]} - 1 ))]%/}"

	###############################
	#  END POSITIONAL PARAMETERS  #
	###############################

# This must come before the other options in
# order for it to take effect
if [[ "${NO_COLOR}" == "true" ]] ; then
	BOLD_BLUE=""
	BOLD_GREEN=""
	BOLD_RED=""
	CYAN=""
	MAGENTA=""
	YELLOW=""
	NORMAL=""
fi

# Check whether DIRECTORY exists
if [[ ! -d "${DIRECTORY}" ]] ; then
	printf "%s\n" "  Usage: ${0} [OPTION] [PATH_TO_FLAC(s)]..."
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " Please specify a directory!"
	exit 1
fi

# Check to make sure script has all the dependencies
# necessary to complete script succesfully
# Check if each command can be found in $PATH
SLEEP_EXISTS="$(command -v sleep)"
STTY_EXISTS="$(command -v stty)"
STAT_EXISTS="$(command -v stat)"
TMKFIFO_EXISTS="$(command -v mkfifo)"
METAFLAC_EXISTS="$(command -v metaflac)"
FLAC_EXISTS="$(command -v flac)"

# Go through and test if each command was found (by displaying its $PATH).  If
# it's empty, add where you can find the package to an array to be displayed.
if [[ -z "${SLEEP_EXISTS}" ]] ; then
	command_exists_array+=( "You can generally install \"sleep\" with the \"coreutils\" package." )
fi

if [[ -z "${STTY_EXISTS}" ]] ; then
	command_exists_array+=( "You can generally install \"stty\" with the \"coreutils\" package." )
fi

if [[ -z "${STAT_EXISTS}" ]] ; then
	command_exists_array+=( "You can generally install \"stat\" with the \"coreutils\" package." )
fi

if [[ -z "${MKFIFO_EXISTS}" ]] ; then
	command_exists_array+=( "You can generally install \"mkfifo\" with the \"coreutils\" package." )
fi

if [[ -z "${METAFLAC_EXISTS}" ]] ; then
	command_exists_array+=( "You can generally install \"metaflac\" with the \"flac\" package." )
fi

if [[ -z "${FLAC_EXISTS}" ]] ; then
	command_exists_array+=( "You can generally install \"flac\" with the \"flac\" package." )
fi

# Display (in bold red) message that system is missing vital programs
display_missing_commands_header () {
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " You seem to be missing one or more necessary programs"
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " to run this script reliably.  Below shows the program(s)"
	printf "%s${BOLD_RED}%s${NORMAL}%s\n\n" \
	" " "*" " missing, as well as where you can install them from:"
}

# If all the programs above were found, continue with script.  Else
# display warning and exit script, printing out which package has
# the missing programs
if [[ -n "${command_exists_array[@]}" ]] ; then
	display_missing_commands_header
	# Iterate through array and print each value
	for i in "${command_exists_array[@]}" ; do
		printf "%s${YELLOW}%s${NORMAL}%s\n" \
		" " "*" " ${i}"
	done
	exit 1
fi

# If "-l, --all" and "-L, --reallyall" are both called, warn and exit
if [[ "${ALL}" == "true" && "${REALLYALL}" == "true" ]] ; then
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " Running both \"-l, --all\" and \"-L, --reallyall\" conflict!"
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " Please choose one or the other." 
	exit 1
fi

# If "-l, --all" or "-L, --reallyall" was called, check if arguments
# were called that already will be performed by the above argument(s).
# If any were called, display a warning and exit the script
if [[ "${ALL}" == "true" || "${REALLYALL}" == "true" ]] ; then

	# Check for "-c, --compress".  If used add it to array
	if [[ "${COMPRESS}" == "true" && "${SKIP_TEST}" == "false" ]] ; then
		argumentConflict+=( "-c, --compress" )
	# Check for "-C, --compress-notest".  If used add it to array
	elif [[ "${COMPRESS}" == "true" && "${SKIP_TEST}" == "true" ]] ; then
		argumentConflict+=( "-C, --compress-notest" )
	fi

	# Check for "-t, --test".  If used add it to array
	if [[ "${TEST}" == "true" ]] ; then
		argumentConflict+=( "-t, --test" )
	fi

	# Check for "-m, --md5check".  If used add it to array
	if [[ "${MD5CHECK}" == "true" ]] ; then
		argumentConflict+=( "-m, --md5check" )
	fi

	# Check for "-p, --prune".  If used add it to array
	if [[ "${PRUNE}" == "true" ]] ; then
		argumentConflict+=( "-p, --prune" )
	fi

	# Check for "-g, --replaygain".  If used add it to array
	if [[ "${REPLAYGAIN}" == "true" && "${REPLAYGAIN_NOFORCE}" != "true" ]] ; then
		argumentConflict+=( "-g, --replaygain" )
	# Check for "-G, --replaygain-noforce".  If used add it to array
	elif [[ "${REPLAYGAIN}" == "true" && "${REPLAYGAIN_NOFORCE}" == "true" ]] ; then
		argumentConflict+=( "-G, --replaygain-noforce" )
	fi

	# Check for "-r, --redo".  If used add it to array
	if [[ "${REDO}" == "true" ]] ; then
		argumentConflict+=( "-r, --redo" )
	fi

	# If "-L, --reallyall" was called, check for the various forms of calling
	# auCDtect.  If it was called, add it to array
	if [[ "${REALLYALL}" == "true" ]] ; then
		if [[ "${AUCDTECT}" == "true" && "${CREATE_SPECTROGRAM}" == "true" ]] ; then
			argumentConflict+=( "-A, --aucdtect-spectrogram" )
		elif [[ "${AUCDTECT}" == "true" && "${CREATE_SPECTROGRAM}" != "true" ]] ; then
			argumentConflict+=( "-a, --aucdtect" )
		fi
	fi

	# If the array is not empty, the user called some incompatible options with
	# "-l, --all" or "-L, --reallyall", so print which options were called that
	# are incompatible and exit script
	if [[ -n "${argumentConflict[@]}" ]] ; then
		# "-l, --all"
		if [[ "${ALL}" == "true" ]] ; then
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " The below options conflict with \"-l, --all\""
		# "-L, --reallyall"
		elif [[ "${REALLYALL}" == "true" ]] ; then
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" " The below options conflict with \"-L, --reallyall\""
		fi

		# Iterate through array and print each value
		for i in "${argumentConflict[@]}" ; do
			printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
			" " "*" "     ${i}"
		done

		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " Please remove incompatible options."
		exit 1
	fi
fi

# If "-C, --compress-notest" and "-c, --compress" are both called, warn and exit
if [[ "${SKIP_TEST}" == "true" && "${COMPRESS_TEST}" == "true" ]] ; then
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " Running both \"-c, --compress\" and \"-C, --compress-notest\" conflict!"
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " Please choose one or the other."
	exit 1
fi

# If "-c, --compress" and "-t, --test" are both called, warn and exit
if [[ "${COMPRESS_TEST}" == "true" && "${TEST}" == "true" ]] ; then
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " Running both \"-c, --compress\" and \"-t, --test\" conflict!"
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " Please choose one or the other."
	exit 1
fi

# If "-g, --replaygain" and "-G, --replaygain-noforce" are both called, warn and exit
if [[ "${REPLAYGAIN_FORCE}" == "true" && "${REPLAYGAIN_NOFORCE}" == "true" ]] ; then
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " Running both \"-g, --replaygain\" and \"-G, --replaygain-noforce\" conflict!"
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " Please choose one or the other."
	exit 1
fi

# If "-a, --aucdtect" and "-A, --aucdtect-spectrogram" are both called, warn and exit
if [[ "${NO_SPECTROGRAM}" == "true"  && "${CREATE_SPECTROGRAM}" == "true" ]] ; then
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " Running both \"-a, --aucdtect\" and \"-A, --aucdtect-spectrogram\" conflict!"
	printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
	" " "*" " Please choose one or the other."
	exit 1
fi

# Check for at least 1 FLAC file
read -r FIND_FLACS < \
	<( for i in "${DIRECTORY}"/**/*${FLAC_EXTENSION} ; do
		printf "%s\n" "${i}"
	done )

# No FLAC files found
if [[ -z "${FIND_FLACS}" ]] ; then
	no_flacs
	exit 1
fi

# Check for the number of CORES to use in this script
find_cores

###########################
#  END PRE-SCRIPT CHECKS  #
###########################

##################
#  BEGIN SCRIPT  #
##################
# Enable BASH 4 globstar
shopt -s globstar

# Store current stty settings
OLD_STTY="$(stty -g)"

# Prevent Control-C from displaying '^C'.  May already be set
stty -ctlecho 2> /dev/null

# Temporary FIFO location
TMP_FIFO="/tmp/redoflacs_fifo_$$"

# Temporary processed files location
PROCESSED_TMP_FILE="/tmp/redoflacs_tmpfile_$$"

# Display the top banner if the user did not call
# --redo argument
if [[ "${REDO}" != "true" ]] ; then
	# Display top banner (in background to allow
	# the script to continue processing
	top_banner
else
	# Check for coverart conflicts and display
	# top banner
	coverart_remove_conflict
	top_banner
fi

# Grab the total flacs to process
total_flacs_array=( "${DIRECTORY}"/**/*${FLAC_EXTENSION} )

# Grab the total number of FLACs found
TOTAL_FLACS="${#total_flacs_array[@]}"

# Grab the total number of indices of above array
TOTAL_FLACS_INDICES="$(( ${#total_flacs_array[@]} - 1 ))"

# Initialize / Clear the temporary file
> "${PROCESSED_TMP_FILE}"

# If "-l, --all" or "-L, --reallyall" was called,
# enable the various arguments to allow script to
# run them
if [[ "${ALL}" == "true" ]] ; then
	COMPRESS="true"
	MD5CHECK="true"
	PRUNE="true"
	REPLAYGAIN="true"
	REDO="true"
elif [[ "${REALLYALL}" == "true" ]] ; then
	COMPRESS="true"
	MD5CHECK="true"
	PRUNE="true"
	REPLAYGAIN="true"
	REDO="true"
	AUCDTECT="true"
	# This is needed to let script know that we want auCDtect
	# to create a spectrogram (ie "-A, --aucdtect-spectrogram")
	CREATE_SPECTROGRAM="true"
fi

# The below order is probably the best bet in ensuring time
# isn't wasted on doing unnecessary operations if the
# FLAC files are corrupt or have metadata issues
if [[ "${AUCDTECT}" == "true" ]] ; then
	# Check if auCDtect is found/installed
	export AUCDTECT_COMMAND="$(command -v auCDtect)"
	if [[ -z "${AUCDTECT_COMMAND}" ]] ; then
		# Check alternate spelling
		export AUCDTECT_COMMAND="$(command -v aucdtect)"
	fi

	if [[ -n "${AUCDTECT_COMMAND}" ]] ; then
		# If "-A, --aucdtect-spectrogram" was called
		# make sure SoX is installed before starting
		if [[ "${CREATE_SPECTROGRAM}" == "true" ]] ; then
			export SOX_COMMAND="$(command -v sox)"
			if [[ -z "${SOX_COMMAND}" ]] ; then
				# SoX can't be found, exit
				printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
				" " "*" " It appears SoX is not installed. Please verify you"
				printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
				" " "*" " have this program installed and can be found in \$PATH"
				exit 1
			fi
		fi

		# Run auCDtect function/command
		aucdtect
	else
		# auCDtect can't be found, exit
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " It appears auCDtect is not installed. Please verify you"
		printf "%s${BOLD_RED}%s${NORMAL}%s\n" \
		" " "*" " have this program installed and can be found in \$PATH"
		exit 1
	fi
fi

if [[ "${COMPRESS}" == "true" ]] ; then
	compress_flacs
fi

if [[ "${TEST}" == "true" ]] ; then
	test_flacs
fi

if [[ "${MD5CHECK}" == "true" ]] ; then
	md5_check
fi

if [[ "${REPLAYGAIN}" == "true" ]] ; then
	replaygain
fi

if [[ "${REDO}" == "true" ]] ; then
	redo_tags
fi

if [[ "${PRUNE}" == "true" ]] ; then
	prune_flacs
fi

# Display warning about legacy COVERART tag, if applicable
if [[ "${COVERART_WARNING}" == "true" ]] ; then
	printf ''
	coverart_warning
fi

# Display summary of completed tasks
operation_summary

exit 0
################
#  END SCRIPT  #
################
